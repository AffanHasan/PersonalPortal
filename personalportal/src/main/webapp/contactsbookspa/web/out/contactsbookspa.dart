// Auto-generated from contactsbookspa.html.
// DO NOT EDIT.

library contacts_book_spa;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'dart:html';
import 'dart:json' as json;
import 'package:lib/cb_locale_data.dart' as cb_locale_data;
import 'package:web_ui/web_ui.dart';
import 'package:web_ui/watcher.dart' as watchers;
import 'package:json_object/json_object.dart';
import 'package:pp_commons/pp_common_ui.dart' as pp_comm_ui;
part '../add_contact.dart';
part '../add_group.dart';
part '../view_contact.dart';
part '../edit_contact.dart';
part '../delete_contact.dart';


// Original code


/**
 * Holds the contacts book state
 */
JsonObject contactsBook = new JsonObject();
ButtonElement addGroupBtn = new ButtonElement();

String searchFilter='';
String baseURL = "/personalportal/ContactsBook?action=";
bool isBookFullyLoaded = false;
bool get showCCG{//Initially on application start up collapsable_contacts_grouping will be rendered
  print(searchFilter);
  if(searchFilter.isEmpty){
    return true;
  }
  else{
    return false;
  }
}
bool get showCS{//contacts_search will be enabled only when user starts typing in the text bar
  print(searchFilter);
  if(searchFilter.isEmpty){
    return false;
  }
  else{
    return true;
  }
}
  

/**
 * Learn about the Web UI package by visiting
 * http://www.dartlang.org/articles/dart-web-components/.
 */
void main() {
  // Enable this to use Shadow DOM in the browser.
  //useShadowDom = true;
  
  //TODO : Render basic UI
  renderBasicUIOnFirstLoad();
  
  //TODO : Load initial data container
  loadDataContainerOnFirstLoad();
}

/**
 * To render the basic user interface div on application start up
 */
void renderBasicUIOnFirstLoad(){
  //query("#application_header").appendHtml("<h1>" + cb_locale_data.getPropertyValue("contactsBook") +"</h1>");
  renderControlsPanelOnFirstLoad();
}

/**
 * To load the data_container div on application start up
 */
void loadDataContainerOnFirstLoad(){
  //DivElement data_container = query("#data_container");
  //Getting list of contacts group
  HttpRequest.getString(baseURL + "getContactsGroupList").then(
      (String responseText){
        DetailsElement group = new DetailsElement();
        String groupName;
        List<String> groupList = json.parse(responseText);//Server returns json list of contacts groups
        if(groupList.isEmpty){//If no contacts in this book
        }
        else{
          for(String groupName in groupList){
            contactsBook[groupName] = "";
            watchers.dispatch();
          }
        }
      }
  );
}

/**
 * To render the controls panel on application start up 
 */
void renderControlsPanelOnFirstLoad(){
  addContactBtn.text = "+";
  addContactBtn.title = cb_locale_data.getPropertyValue("addContact");
  addContactBtn.id = "add_contact_btn";
  addContactBtn.onClick.listen(
      (Event e){
        launchGeneralDialog();
        populateGeneralDialogForAddContact();
      }
  );
  query("#control_panel").append(addContactBtn);
  addGroupBtn.text = "⊞";
  addGroupBtn.title = cb_locale_data.getPropertyValue("addGroup");
  addGroupBtn.id = "add_contacts_group";
  addGroupBtn.onClick.listen(
      (Event e){
        launchGeneralDialog();
        populateGeneralDialogForAddGroup();
      }
  );
  query("#control_panel").append(addGroupBtn);
}

/**
 * It checks if the contactsBook Map contains a contacts list for a group name or not,
 * if not then load it from server and add it to the contactsBook map.
 * Also has an option of asynchronous or synchronous requests.
 * */
void loadContactsListForGroup(String groupName, bool asynchronous, Event event){
  if(contactsBook[groupName].isEmpty){
    if(asynchronous){
      List<JsonObject> contactsList;
      HttpRequest.getString(baseURL + "getContactsListForAGroup" + "&" + "groupName=" + groupName).then(
          (String responseText){
            contactsList = json.parse(responseText);
            contactsBook[groupName] = (contactsList == null || contactsList.isEmpty) ? new List<JsonObject>() : contactsList;
            watchers.dispatch();
          }
      );
    }else{
      //Sending the post request to the server
      HttpRequest request = new HttpRequest();
      // add an event handler that is called when the request finishes
      request.onReadyStateChange.listen((_) {
        if (request.readyState == HttpRequest.DONE &&
            (request.status == 200 || request.status == 0)) {
          List<JsonObject> contactsList;
          contactsList = json.parse(request.responseText);
          contactsBook[groupName] = (contactsList == null || contactsList.isEmpty) ? new List<JsonObject>() : contactsList;
          watchers.dispatch();
        }
      });
      request.open("GET", baseURL + "getContactsListForAGroup" + "&" + "groupName=" + groupName, async: false);
      request.send();
    }
  }
}

void loadFullContactsBook(){
  if(!isBookFullyLoaded){
    print('Not fully lodaded');
    HttpRequest.getString(baseURL + "getContactsBookForTheLoggedInUser").then(
        (String responseText){
          contactsBook = json.parse(responseText);
          isBookFullyLoaded = true;
          watchers.dispatch();
        }
    );
  }
}

bool matchCriteria(JsonObject contact){
  if((contact['name']).toLowerCase().contains(searchFilter.toLowerCase())){
    return true;
  } 
  if(contact['comments'] != null)
    if((contact['comments']).toLowerCase().contains(searchFilter.toLowerCase())){
      return true;
    }
  return false;
}

/**
 * To launch the general dialog use this function and pass the type of action as string parameter
 */
void launchGeneralDialog(){
 query("#overlay_shield").style.display = "inline";
 query("#general_dialog").style.display = "inline";
}

void closeGeneralDialog(){
  query("#overlay_shield").style.display = "none";
  query("#general_dialog").style.display = "none";
  query("#general_dialog_header_content").innerHtml = "";
  query("#general_dialog_body").innerHtml = "";
  query("#general_dialog_footer").innerHtml = "";
}
// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.tag('template'), __html1 = new autogenerated.Element.html('<details>\n            <summary></summary>\n            <ul></ul>\n          </details>'), __html10 = new autogenerated.UListElement(), __html11 = new autogenerated.Element.html('<li style="display:none"></li>'), __html12 = new autogenerated.Element.html('<li template="" if="matchCriteria(contact)">\n                <a name="contact_name" href="#"></a>\n                <span name="contact_comments"></span>\n                <span style="display:none"></span>\n                <span style="display:none"></span>\n                <span style="display:none"></span>\n                <span name="edit_contact_btn">✎</span>\n                <span name="delete_contact_btn">✗</span>\n              </li>'), __html13 = new autogenerated.Element.html('<span template="" if="contact[\'cellPhoneList\'] != null">\n                  <span name="contact_cell_phones"></span>\n                </span>'), __html14 = new autogenerated.Element.html('<span name="cell_phone_item"></span>'), __html15 = new autogenerated.Element.html('<span template="" if="contact[\'landLinesList\'] != null">\n                  <span name="contact_land_lines"></span>\n                </span>'), __html16 = new autogenerated.Element.html('<span name="land_line_item"></span>'), __html17 = new autogenerated.Element.html('<span template="" if="contact[\'addressesList\'] != null">\n                  <span name="contact_addresses"></span>\n                </span>'), __html18 = new autogenerated.Element.html('<span name="address_item_item"></span>'), __html2 = new autogenerated.Element.html('<li>\n                <a name="contact_name" href="#"></a>\n                <span name="contact_comments"></span>\n                <span style="display:none"></span>\n                <span style="display:none"></span>\n                <span style="display:none"></span>\n                <span name="edit_contact_btn">✎</span>\n                <span name="delete_contact_btn">✗</span>\n              </li>'), __html3 = new autogenerated.Element.html('<span template="" if="contact[\'cellPhoneList\'] != null">\n                  <span name="contact_cell_phones"></span>\n                </span>'), __html4 = new autogenerated.Element.html('<span name="cell_phone_item"></span>'), __html5 = new autogenerated.Element.html('<span template="" if="contact[\'landLinesList\'] != null">\n                  <span name="contact_land_lines"></span>\n                </span>'), __html6 = new autogenerated.Element.html('<span name="land_line_item"></span>'), __html7 = new autogenerated.Element.html('<span template="" if="contact[\'addressesList\'] != null">\n                  <span name="contact_addresses"></span>\n                </span>'), __html8 = new autogenerated.Element.html('<span name="address_item_item"></span>'), __html9 = new autogenerated.Element.tag('template');
  var __e1, __e2, __e30, __e56, __e57;
  var __t = new autogenerated.Template(__root);
  __e1 = __root.nodes[1].nodes[1];
  var __binding0 = __t.contentBind(() =>  cb_locale_data.getPropertyValue("contactsBook") , false);
  __e1.nodes.addAll([new autogenerated.Text(' '),
      __binding0,
      new autogenerated.Text(' ')]);
  __e2 = __root.nodes[1].nodes[3];
  __t.listen(__e2.onInput, ($event) { searchFilter = __e2.value; });
  __t.listen(__e2.onKeyUp, ($event) { $event = new autogenerated.KeyEvent($event); loadFullContactsBook(); });
  __t.oneWayBind(() => searchFilter, (e) { if (__e2.value != e) __e2.value = e; }, false, false);
  __e30 = __root.nodes[7].nodes[3];
  __t.conditional(__e30, () => showCCG, (__t) {
    var __e29;
    __e29 = __html0.clone(true);
    __t.loop(__e29, () => contactsBook.keys, ($list, $index, __t) {
      var groupName = $list[$index];
      var __e27, __e28, __e4;
      __e28 = __html1.clone(true);
      __e4 = __e28.nodes[1];
      var __binding3 = __t.contentBind(() => groupName, false);
      __e4.nodes.add(__binding3);
      __t.listen(__e4.onClick, ($event) { loadContactsListForGroup('$groupName', true, $event); });
      __e27 = __e28.nodes[3];
      __t.bind(() => groupName,  (__e) { __e27.id = '${__e.newValue}_contacts_list'; }, false);
      __t.loopIterateAttr(__e27, () => contactsBook['$groupName'], ($list, $index, __t) {
        var contact = $list[$index];
        var __e13, __e18, __e23, __e24, __e25, __e26, __e6, __e8;
        __e26 = __html2.clone(true);
        __e6 = __e26.nodes[1];
        var __binding5 = __t.contentBind(() =>  contact['name'] , false);
        __e6.nodes.addAll([new autogenerated.Text('\n                  '),
            __binding5,
            new autogenerated.Text('\n                ')]);
        __t.listen(__e6.onClick, ($event) { populateGeneralDialogWithContactDetails('$groupName', contact['_id']); });
        __e8 = __e26.nodes[3];
        var __binding7 = __t.contentBind(() =>  contact['comments'] == null ? "" : contact['comments'] , false);
        __e8.nodes.add(__binding7);
        __e13 = __e26.nodes[5];
        __t.conditional(__e13, () => contact['cellPhoneList'] != null, (__t) {
          var __e11, __e12;
          __e12 = __html3.clone(true);
          __e11 = __e12.nodes[1];
          __t.loopIterateAttr(__e11, () => contact['cellPhoneList'], ($list, $index, __t) {
            var cellPhone = $list[$index];
            var __e10;
            __e10 = __html4.clone(true);
            var __binding9 = __t.contentBind(() =>  cellPhone['network'] + ' '  + cellPhone['number'] , false);
            __e10.nodes.addAll([new autogenerated.Text('\n                        '),
                __binding9,
                new autogenerated.Text('\n                      ')]);
          __t.addAll([new autogenerated.Text('\n                      '),
              __e10,
              new autogenerated.Text('\n                  ')]);
          });
        __t.add(__e12);
        });

        __e18 = __e26.nodes[7];
        __t.conditional(__e18, () => contact['landLinesList'] != null, (__t) {
          var __e16, __e17;
          __e17 = __html5.clone(true);
          __e16 = __e17.nodes[1];
          __t.loopIterateAttr(__e16, () => contact['landLinesList'], ($list, $index, __t) {
            var landLine = $list[$index];
            var __e15;
            __e15 = __html6.clone(true);
            var __binding14 = __t.contentBind(() =>  landLine['country'] + ' '  + landLine['areaCode'] + ' '  + landLine['number'] , false);
            __e15.nodes.addAll([new autogenerated.Text('\n                        '),
                __binding14,
                new autogenerated.Text('\n                      ')]);
          __t.addAll([new autogenerated.Text('\n                      '),
              __e15,
              new autogenerated.Text('\n                  ')]);
          });
        __t.add(__e17);
        });

        __e23 = __e26.nodes[9];
        __t.conditional(__e23, () => contact['addressesList'] != null, (__t) {
          var __e21, __e22;
          __e22 = __html7.clone(true);
          __e21 = __e22.nodes[1];
          __t.loopIterateAttr(__e21, () => contact['addressesList'], ($list, $index, __t) {
            var address = $list[$index];
            var __e20;
            __e20 = __html8.clone(true);
            var __binding19 = __t.contentBind(() =>  address['address'] , false);
            __e20.nodes.addAll([new autogenerated.Text('\n                        '),
                __binding19,
                new autogenerated.Text('\n                      ')]);
          __t.addAll([new autogenerated.Text('\n                      '),
              __e20,
              new autogenerated.Text('\n                  ')]);
          });
        __t.add(__e22);
        });

        __e24 = __e26.nodes[11];
        __t.listen(__e24.onClick, ($event) { populateGeneralDialogForEditContact('$groupName', contact['_id']); });
        __e25 = __e26.nodes[13];
        __t.listen(__e25.onClick, ($event) { deleteContact('$groupName', contact['_id']); });
      __t.addAll([new autogenerated.Text('\n              '),
          __e26,
          new autogenerated.Text('\n            ')]);
      });
      __t.bind(() => groupName,  (__e) { __e28.id = '${__e.newValue}_group'; }, false);
    __t.addAll([new autogenerated.Text('\n          '),
        __e28,
        new autogenerated.Text('\n        ')]);
    });
  __t.addAll([new autogenerated.Text('\n        '),
      __e29,
      new autogenerated.Text('\n      ')]);
  });

  __e56 = __root.nodes[7].nodes[7];
  __t.conditional(__e56, () => showCS, (__t) {
    var __e55;
    __e55 = __html9.clone(true);
    __t.loop(__e55, () => contactsBook.keys, ($list, $index, __t) {
      var groupName = $list[$index];
      var __e54;
      __e54 = __html10.clone(true);
      __t.loopIterateAttr(__e54, () => contactsBook['$groupName'], ($list, $index, __t) {
        var contact = $list[$index];
        var __e53;
        __e53 = __html11.clone(true);
        __t.conditional(__e53, () => matchCriteria(contact), (__t) {
          var __e32, __e34, __e39, __e44, __e49, __e50, __e51, __e52;
          __e52 = __html12.clone(true);
          __e32 = __e52.nodes[1];
          var __binding31 = __t.contentBind(() =>  contact['name'] , false);
          __e32.nodes.addAll([new autogenerated.Text('\n                  '),
              __binding31,
              new autogenerated.Text('\n                ')]);
          __t.listen(__e32.onClick, ($event) { populateGeneralDialogWithContactDetails('$groupName', contact['_id']); });
          __e34 = __e52.nodes[3];
          var __binding33 = __t.contentBind(() =>  contact['comments'] == null ? "" : contact['comments'] , false);
          __e34.nodes.add(__binding33);
          __e39 = __e52.nodes[5];
          __t.conditional(__e39, () => contact['cellPhoneList'] != null, (__t) {
            var __e37, __e38;
            __e38 = __html13.clone(true);
            __e37 = __e38.nodes[1];
            __t.loopIterateAttr(__e37, () => contact['cellPhoneList'], ($list, $index, __t) {
              var cellPhone = $list[$index];
              var __e36;
              __e36 = __html14.clone(true);
              var __binding35 = __t.contentBind(() =>  cellPhone['network'] + ' '  + cellPhone['number'] , false);
              __e36.nodes.addAll([new autogenerated.Text('\n                        '),
                  __binding35,
                  new autogenerated.Text('\n                      ')]);
            __t.addAll([new autogenerated.Text('\n                      '),
                __e36,
                new autogenerated.Text('\n                  ')]);
            });
          __t.add(__e38);
          });

          __e44 = __e52.nodes[7];
          __t.conditional(__e44, () => contact['landLinesList'] != null, (__t) {
            var __e42, __e43;
            __e43 = __html15.clone(true);
            __e42 = __e43.nodes[1];
            __t.loopIterateAttr(__e42, () => contact['landLinesList'], ($list, $index, __t) {
              var landLine = $list[$index];
              var __e41;
              __e41 = __html16.clone(true);
              var __binding40 = __t.contentBind(() =>  landLine['country'] + ' '  + landLine['areaCode'] + ' '  + landLine['number'] , false);
              __e41.nodes.addAll([new autogenerated.Text('\n                        '),
                  __binding40,
                  new autogenerated.Text('\n                      ')]);
            __t.addAll([new autogenerated.Text('\n                      '),
                __e41,
                new autogenerated.Text('\n                  ')]);
            });
          __t.add(__e43);
          });

          __e49 = __e52.nodes[9];
          __t.conditional(__e49, () => contact['addressesList'] != null, (__t) {
            var __e47, __e48;
            __e48 = __html17.clone(true);
            __e47 = __e48.nodes[1];
            __t.loopIterateAttr(__e47, () => contact['addressesList'], ($list, $index, __t) {
              var address = $list[$index];
              var __e46;
              __e46 = __html18.clone(true);
              var __binding45 = __t.contentBind(() =>  address['address'] , false);
              __e46.nodes.addAll([new autogenerated.Text('\n                        '),
                  __binding45,
                  new autogenerated.Text('\n                      ')]);
            __t.addAll([new autogenerated.Text('\n                      '),
                __e46,
                new autogenerated.Text('\n                  ')]);
            });
          __t.add(__e48);
          });

          __e50 = __e52.nodes[11];
          __t.listen(__e50.onClick, ($event) { populateGeneralDialogForEditContact('$groupName', contact['_id']); });
          __e51 = __e52.nodes[13];
          __t.listen(__e51.onClick, ($event) { deleteContact('$groupName', contact['_id']); });
        __t.add(__e52);
        });

      __t.addAll([new autogenerated.Text('\n              '),
          __e53,
          new autogenerated.Text('\n          ')]);
      });
    __t.addAll([new autogenerated.Text('\n          '),
        __e54,
        new autogenerated.Text('\n        ')]);
    });
  __t.addAll([new autogenerated.Text('\n        '),
      __e55,
      new autogenerated.Text('\n      ')]);
  });

  __e57 = __root.nodes[11].nodes[1].nodes[3];
  __t.listen(__e57.onClick, ($event) { closeGeneralDialog(); });
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=contactsbookspa.dart.map