// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterable = {"": "IterableBase;",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (!t1.$eq($length, this.get$length(this)))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  where$1: function(_, test) {
    return $.IterableBase.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1, result, t2, i;
    if (growable === true) {
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result = $.List_List($, t1);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      t1 = this.get$length(this);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t2 = $arguments == null ? null : $arguments[0];
      result = $.List_List(t1, t2);
      $arguments = this.$asListIterable;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SubListIterable = {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.$gt$n(t1, $length) === true)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (typeof t1 !== "number")
      return this.get$length$bailout2(2, $length, t1);
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (typeof t2 !== "number")
      return this.get$length$bailout2(3, $length, t1, t2);
    if (t2 >= $length)
      return $length - t1;
    return t2 - t1;
  },
  get$length$bailout2: function(state0, $length, t1, t2) {
    switch (state0) {
      case 0:
        $length = $.get$length$asx(this._iterable);
      case 1:
        state0 = 0;
        t1 = this._start;
      case 2:
        state0 = 0;
        if ($.$ge$n(t1, $length) === true)
          return 0;
        t2 = this._endOrLength;
      case 3:
        state0 = 0;
        if (t2 == null || $.$ge$n(t2, $length) === true)
          return $.$sub$n($length, t1);
        return $.$sub$n(t2, t1);
    }
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && $.$lt$n(index, 0) !== true)
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1) === true;
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  $asListIterable: null,
  $asIterable: null
};

$$.ListIterator = {"": "Object;_iterable,_liblib$_length,_index,_liblib$_current",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if (!$.$eq(t1, $.get$length$asx(t2)))
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "IterableBase;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {"": "Iterator;_liblib$_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.MappedListIterable = {"": "ListIterable;_liblib$_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.SkipIterable = {"": "IterableBase;_iterable,_skipCount",
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SkipIterator = {"": "Iterator;_iterator,_skipCount",
  moveNext$0: function() {
    var t1, i;
    for (t1 = this._iterator, i = 0; $.JSNumber_methods.$lt(i, this._skipCount); ++i)
      t1.moveNext$0();
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
};

$$.Symbol0 = {"": "Object;_name<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isSymbol0 && $.$eq(this._name, other._name);
  },
  get$hashCode: function(_) {
    var t1 = $.get$hashCode$(this._name);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return 536870911 & 664597 * t1;
  },
  toString$0: function(_) {
    return "Symbol(\"" + $.S(this._name) + "\")";
  },
  $isSymbol0: true,
  $isSymbol: true
};

$$.ToString__emitPair_closure = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.HashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.HashMap_addAll_closure = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.HashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0());
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_closure = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.LinkedHashMap_addAll_closure = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.LinkedHashMapCell = {"": "Object;_key<,_value@,_next@,_previous@"};

$$.LinkedHashMapKeyIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {"": "Object;_map,_modifications,_cell,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_liblib5$_keys",
  containsKey$1: function(_, key) {
    if ($.$eq(key, "__proto__"))
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(this, key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib5$_keys, new $.ConstantMap_forEach_closure(this, f));
  },
  get$keys: function(_) {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._liblib5$_keys, new $.ConstantMap_values_closure(this));
  },
  get$isEmpty: function(_) {
    return $.$eq(this.length, 0);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  $indexSet: function(_, key, val) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  remove$1: function(_, key) {
    $.throwExpression($.UnsupportedError$("Cannot modify unmodifiable Map"));
    return;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $isMap: true,
  $asMap: function (V) { return [$.JSString, V]; }
};

$$.ConstantMap_forEach_closure = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
};

$$.ConstantMap_values_closure = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
};

$$.ConstantProtoMap = {"": "ConstantMap;_protoValue,length,_jsObject,_liblib5$_keys",
  containsKey$1: function(_, key) {
    if ($.$eq(key, "__proto__"))
      return true;
    return $.ConstantMap.prototype.containsKey$1.call(this, this, key);
  },
  $index: function(_, key) {
    if ($.$eq(key, "__proto__"))
      return this._protoValue;
    return $.ConstantMap.prototype.$index.call(this, this, key);
  },
  $asConstantMap: null,
  $asMap: function (V) { return [$.JSString, V]; }
};

$$._ConstantMapKeyIterable = {"": "IterableBase;_liblib5$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib5$_map._liblib5$_keys);
  },
  $asIterable: function() { return [$.JSString]; }
};

$$._symbolMapToStringMap_closure = {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_name(), value);
  },
  $isFunction: true
};

$$.NoSuchMethodError_toString_closure = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1, t2, str, t3;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    t3 = $.Error_safeToString(value);
    t2._contents = t2._contents + t3;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$._symbolMapToStringMap_closure0 = {"": "Closure;result_0",
  call$2: function(key, value) {
    var t1 = this.result_0;
    t1.$indexSet(t1, key.get$_name(), value);
  },
  $isFunction: true
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.Primitives_objectTypeName(receiver) + "'";
  },
  noSuchMethod$1: function(receiver, invocation) {
    throw $.wrapException($.NoSuchMethodError$(receiver, invocation.memberName._name, invocation.get$positionalArguments(), $._symbolMapToStringMap0(invocation.get$namedArguments()), null));
  }
};

$$.JSBool = {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "EventSink;_isClosed,_port<",
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port());
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    var t1, t2;
    if (this.isWorker === true) {
      t1 = this.isolates;
      t1.get$isEmpty;
      t1 = t1._liblib0$_length === 0 && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t2 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      t1.postMessage$1;
      self.postMessage(t2);
    }
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.JSInt, $._IsolateContext);
    this.managers = $.Map_Map($.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id*,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1 = this.ports;
    if (t1.containsKey$1(t1, portId))
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._liblib0$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map($.JSInt, $.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  $is_IsolateContext: true
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    var t1 = this.events;
    t1._add$1(t1, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null) {
      var t1 = $globalState.isolates;
      if (t1.containsKey$1(t1, $globalState.rootContext.id))
        if ($globalState.fromCommandLine === true) {
          t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $._StackTrace$(exception.stack);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  },
  $is_IsolateEvent: true
};

$$._MainManagerStub = {"": "Object;",
  postMessage$1: function(_, msg) {
    self.postMessage(msg);
  }
};

$$.IsolateNatives__processWorkerMessage_closure = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.lazyPort = $.ReceivePortImpl$();
    $.send$2$x(this.replyTo_1, "spawned", $._Isolate_port().toSendPort$0());
    this.entryPoint_0.call$0();
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._AsyncCompleter$(null);
    port = $.ReceivePortImpl$();
    this.send$2(this, message, $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_closure(completer, port);
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_closure = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException) {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(value);
    } else {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureValue$1(value);
    }
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_closure = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && !$.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId());
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__closure(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__closure = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t2 = this.box_0;
      t1.get$_receivePort()._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_closure(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) && $.$eq(this._isolateId, other._isolateId) && $.$eq(this._receivePortId, other._receivePortId);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.$xor$n($.$xor$n($.$shl$n(this._workerId, 16), $.$shl$n(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_closure = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().currentContext, this._id, this);
  },
  $isReceivePort: true
};

$$._waitForPendingPorts_closure = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_closure(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax($.get$values$x(map), new $._PendingSendPortFinder_visitMap_closure(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_closure = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;_visited",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {"": "_MessageTraverser;_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._visited;
        copy = t1.$index(t1, list);
        if (copy != null)
          return copy;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var copy, t2, i, t3;
        state0 = 0;
        copy = $.List_List(len, null);
        t2 = this._visited;
        t2.$indexSet(t2, list, copy);
        for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = t3;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    $.forEach$1$ax(map, new $._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    $.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;_nextFreeRefId,_visited",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    t1 = $.getInterceptor$x(map);
    return ["map", id, this._serializeList$1($.toList$0$ax(t1.get$keys(map))), this._serializeList$1($.toList$0$ax(t1.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(list);
        len = t1.get$length(list);
      case 2:
        var result, t2, i, t3;
        state0 = 0;
        result = $.List_List(len, null);
        for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
          t3 = this._dispatch$1(t1.$index(list, i));
          if (i >= t2)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;_deserialized",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, t1, x, result, keys);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, 0, 0, result, keys, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, t1, x, result, keys, values, len) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
      case 3:
        var id, t2, i;
        state0 = 0;
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function(_) {
    var t1;
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.wrapException($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.wrapException($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().topEventLoop.enqueue$3($._globalState().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.TimerImpl_internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.TimerImpl_internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
};

$$.JSArray = {"": "List/Interceptor;",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if ($.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    var $arguments, arguments0, t1;
    $arguments = receiver.$asJSArray;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.List_List$from(receiver, growable, t1);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {"": "JSArray;", $asList: function() { return [null]; }, $asIterable: function() { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.JSInvocationMirror = {"": "Object;memberName,_internalName,_kind,_liblib5$_arguments,_namedArgumentNames,_namedIndices",
  get$isGetter: function() {
    return $.$eq(this._kind, 1);
  },
  get$isSetter: function() {
    return $.$eq(this._kind, 2);
  },
  get$isAccessor: function() {
    return !$.$eq(this._kind, 0);
  },
  get$positionalArguments: function() {
    var list, t1, t2, t3, argumentCount, index;
    if (this.get$isGetter())
      return;
    list = [];
    t1 = this._liblib5$_arguments;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$positionalArguments$bailout(1, t1, list);
    t2 = t1.length;
    t3 = $.get$length$asx(this._namedArgumentNames);
    if (typeof t3 !== "number")
      throw $.iae(t3);
    argumentCount = t2 - t3;
    for (index = 0; index < argumentCount; ++index) {
      if (index >= t1.length)
        throw $.ioore(index);
      list.push(t1[index]);
    }
    return list;
  },
  get$positionalArguments$bailout: function(state0, t1, list) {
    var argumentCount, t2, index;
    argumentCount = $.$sub$n($.get$length$asx(t1), $.get$length$asx(this._namedArgumentNames));
    for (t2 = $.getInterceptor$asx(t1), index = 0; $.JSNumber_methods.$lt(index, argumentCount); ++index)
      list.push(t2.$index(t1, index));
    return list;
  },
  get$namedArguments: function() {
    var map, t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, i, t4, t5;
    if (this.get$isAccessor())
      return;
    map = $.Map_Map($.Symbol, null);
    t1 = this._namedArgumentNames;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(1, t1, map);
    namedArgumentCount = t1.length;
    t2 = this._liblib5$_arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.get$namedArguments$bailout(3, t1, map, namedArgumentCount, t2);
    namedArgumentsStartIndex = t2.length - namedArgumentCount;
    for (t3 = $.getInterceptor$ax(map), i = 0; i < namedArgumentCount; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t4 = $.Symbol$unvalidated(t1[i]);
      t5 = namedArgumentsStartIndex + i;
      if (t5 < 0 || t5 >= t2.length)
        throw $.ioore(t5);
      t3.$indexSet(map, t4, t2[t5]);
    }
    return map;
  },
  get$namedArguments$bailout: function(state0, t1, map, namedArgumentCount, t2) {
    switch (state0) {
      case 0:
        if (this.get$isAccessor())
          return;
        map = $.Map_Map($.Symbol, null);
        t1 = this._namedArgumentNames;
      case 1:
        state0 = 0;
        namedArgumentCount = $.get$length$asx(t1);
      case 2:
        state0 = 0;
        t2 = this._liblib5$_arguments;
      case 3:
        var namedArgumentsStartIndex, t3, t4, t5, t6, i;
        state0 = 0;
        namedArgumentsStartIndex = $.$sub$n($.get$length$asx(t2), namedArgumentCount);
        for (t3 = $.getInterceptor$asx(t1), t4 = $.getInterceptor$ns(namedArgumentsStartIndex), t5 = $.getInterceptor$asx(t2), t6 = $.getInterceptor$ax(map), i = 0; $.JSNumber_methods.$lt(i, namedArgumentCount); ++i)
          t6.$indexSet(map, $.Symbol$unvalidated(t3.$index(t1, i)), t5.$index(t2, t4.$add(namedArgumentsStartIndex, i)));
        return map;
    }
  }
};

$$.DartError = {"": "Object;",
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.stack == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.stack);
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper$closure.call$0;
  }
};

$$._StackTrace = {"": "Object;_stack",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_closure = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_closure0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_closure1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Creates = {"": "Object;types"};

$$.Returns = {"": "Object;types"};

$$.JSName = {"": "Object;name"};

$$.Null = {"": "Object;"};

$$.TypeErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.CastErrorImplementation = {"": "Object;message",
  toString$0: function(_) {
    return this.message;
  }
};

$$.FallThroughErrorImplementation = {"": "Object;",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
};

$$.JSNumber = {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var t1, bIsNegative;
    if (typeof b !== "number")
      throw $.wrapException($.ArgumentError$(b));
    else
      b;
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      t1 = receiver === 0;
      if (t1) {
        bIsNegative = this.get$isNegative(b);
        if ((t1 ? 1 / receiver < 0 : receiver < 0) === bIsNegative)
          return 0;
        if (t1 ? 1 / receiver < 0 : receiver < 0)
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    var t1, truncated;
    t1 = receiver / other;
    if (isNaN(t1))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (t1 == Infinity || t1 == -Infinity)
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = t1 < 0 ? Math.ceil(t1) : Math.floor(t1);
    return truncated == -0.0 ? 0 : truncated;
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "int/JSNumber;", $isint: true, $isnum: true};

$$.JSDouble = {"": "double/JSNumber;", $isdouble: true, $isnum: true};

$$.TypeImpl = {"": "Object;_typeName",
  toString$0: function(_) {
    return this._typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl && $.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
};

$$.JSString = {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  indexOf$2: function(receiver, other, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_closure = {"": "Closure;",
  call$2: function(key, value) {
    return value;
  },
  $isFunction: true
};

$$._convertJsonToDart_walk = {"": "Closure;revive_0",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  },
  $isFunction: true
};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression($.ArgumentError$(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this._pattern, str, matchStart, matchStart + t1, m);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern,str,start,end,_groups",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
};

$$._AllMatchesIterable = {"": "IterableBase;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() { return [$.Match]; }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib5$_current",
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    this._liblib5$_current = this._re.firstMatch$1(this._str);
    return this._liblib5$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    if (!$.$eq(g, 0))
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
};

$$._Completer = {"": "Object;"};

$$._AsyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureValue_closure(value, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _setFutureError$1: function(error) {
    $.get$_asyncCallbacks().push(new $._AsyncCompleter__setFutureError_closure(error, this.future));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  $as_Completer: null
};

$$._AsyncCompleter__setFutureValue_closure = {"": "Closure;value_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.value_0);
  },
  $isFunction: true
};

$$._AsyncCompleter__setFutureError_closure = {"": "Closure;error_0,future_1",
  call$0: function() {
    this.future_1._setError$1(this.error_0);
  },
  $isFunction: true
};

$$._SyncCompleter = {"": "_Completer;future,_isComplete",
  _setFutureValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _setFutureError$1: function(error) {
    this.future._setError$1(error);
  },
  $as_Completer: null
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  then$2$onError: function(f, onError) {
    var t1;
    if (onError == null) {
      t1 = $._ThenFuture$(f, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    t1 = $._SubscribeFuture$(f, onError, null, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1 = $._CatchErrorFuture$(f, test, null);
    t1._subscribeTo$1(this);
    return t1;
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this._state !== 0)
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.get$_asyncCallbacks().push(new $._FutureImpl__scheduleUnhandledError_closure(this));
    if (!$._callbacksAreEnqueued) {
      $.Timer_run($._asyncRunCallback$closure);
      $._callbacksAreEnqueued = true;
    }
  },
  _addListener$1: function(listener) {
    var t1 = this._state;
    if (t1 !== 0) {
      this._state = (t1 & 4294967291) >>> 0;
      $.get$_asyncCallbacks().push(new $._FutureImpl__addListener_closure(this, listener));
      if (!$._callbacksAreEnqueued) {
        $.Timer_run($._asyncRunCallback$closure);
        $._callbacksAreEnqueued = true;
      }
    } else {
      listener.set$_nextListener(this._resultOrListeners);
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1 = this._state;
    if (t1 === 0)
      this._addListener$1($._FutureListenerWrapper$(future));
    else if (t1 === 1)
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (t1 & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  _FutureImpl$immediateError$2: function(error, stackTrace, T) {
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this._setError$1(error);
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1 = t1.completer_0;
      t1.completeError$2;
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1._setFutureError$1(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_closure = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2.complete$1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2._setFutureValue$1(t1);
    }
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_closure = {"": "Closure;this_0",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (!$.$eq($.$and$n(t1.get$_state(), 4), 0)) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  },
  $isFunction: true
};

$$._FutureImpl__addListener_closure = {"": "Closure;this_0,listener_1",
  call$0: function() {
    var t1, t2, value;
    t1 = this.this_0;
    t2 = $.$eq(t1.get$_state(), 1);
    value = t1.get$_resultOrListeners();
    t1 = this.listener_1;
    if (t2)
      t1._sendValue$1(value);
    else
      t1._sendError$1(value);
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $._StackTrace$(exception.stack);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$.Stream = {"": "Object;",
  where$1: function(_, test) {
    var $arguments, arguments0, t1;
    $arguments = this.$asStream;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $._WhereStream$(this, test, t1);
  },
  map$1: function(_, convert) {
    var $arguments, arguments0, t1;
    $arguments = this.$asStream;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $._MapStream$(this, convert, t1, null);
  },
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_closure(t1, action, future), true, new $.Stream_forEach_closure0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_closure(t1), true, new $.Stream_length_closure0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$($.JSBool);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_closure(t1, future), true, new $.Stream_isEmpty_closure0(future), future.get$_setError());
    return future;
  },
  toList$0: function(_) {
    var result, $arguments, arguments0, t1, future;
    result = [];
    $arguments = this.$asStream;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    future = $._FutureImpl$([$.JSArray, t1]);
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_toList_closure(result), true, new $.Stream_toList_closure0(result, future), future.get$_setError());
    return future;
  },
  elementAt$1: function(_, index) {
    var t1, t2, $arguments, arguments0, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0) === true)
      throw $.wrapException($.ArgumentError$(t1.index_0));
    $arguments = this.$asStream;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[0];
    future = $._FutureImpl$(t2);
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_closure(t1, future), true, new $.Stream_elementAt_closure0(future), future.get$_setError());
    return future;
  }
};

$$.Stream_forEach_closure = {"": "Closure;box_0,action_1,future_2",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__closure(this.action_1, element), new $.Stream_forEach__closure0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  },
  $isFunction: true
};

$$.Stream_forEach__closure = {"": "Closure;action_3,element_4",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  },
  $isFunction: true
};

$$.Stream_forEach__closure0 = {"": "Closure;",
  call$1: function(_) {
  },
  $isFunction: true
};

$$.Stream_forEach_closure0 = {"": "Closure;future_5",
  call$0: function() {
    this.future_5._setValue$1(null);
  },
  $isFunction: true
};

$$.Stream_length_closure = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_closure0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    var t1 = this.box_0.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_closure = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_closure0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.Stream_elementAt_closure = {"": "Closure;box_0,future_1",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0)) {
      t1 = t1.subscription_1;
      t1.cancel$0(t1);
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  },
  $isFunction: true
};

$$.Stream_elementAt_closure0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$.EventSink = {"": "Object;"};

$$._throwDelayed_closure = {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.JSNull_methods.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && !t3.$eq(trace, t1))
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  },
  $isFunction: true
};

$$._cancelAndError_closure = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    var t1 = this.subscription_0;
    t1.cancel$0(t1);
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    if (onError == null)
      onError = $._nullErrorHandler$closure;
    if (onDone == null)
      onDone = $._nullDoneHandler$closure;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib6$_onData$1(data);
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _liblib6$_onData$1: function(arg0) {
    return this._liblib6$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._onError == null)
      this._onError = $._nullErrorHandler$closure;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler$closure;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_cancelOnError<,_liblib6$_subscription@,_liblib6$_onData,_onError,_onDone",
  cancel$0: function(_) {
    var t1 = this._liblib6$_subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._liblib6$_subscription = null;
    }
  },
  _sendError$1: function(error) {
    var t1;
    this._onError$1(error);
    if (this._cancelOnError) {
      t1 = this._liblib6$_subscription;
      t1.cancel$0(t1);
      this._liblib6$_subscription = null;
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    var t1;
    this._onError$1(error);
    if (this._cancelOnError) {
      t1 = this._liblib6$_subscription;
      t1.cancel$0(t1);
      this._liblib6$_subscription = null;
    }
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._liblib6$_subscription = null;
    var t1 = this._liblib6$_subscription;
    if (t1 != null) {
      t1.cancel$0(t1);
      this._liblib6$_subscription = null;
    }
    this._onDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._liblib6$_subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError() === true) {
        $.cancel$0$x(t1.get$_liblib6$_subscription());
        t1.set$_liblib6$_subscription(null);
      }
      return;
    }

    if (satisfies === true)
      sink._liblib6$_onData$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $._StackTrace$(exception.stack);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError() === true) {
        $.cancel$0$x(t1.get$_liblib6$_subscription());
        t1.set$_liblib6$_subscription(null);
      }
      return;
    }

    sink._liblib6$_onData$1(outputEvent);
  },
  $as_ForwardingStream: null
};

$$._SkipStream = {"": "_ForwardingStream;_remaining,_source",
  _handleData$2: function(inputEvent, sink) {
    if ($.$gt$n(this._remaining, 0) === true) {
      this._remaining = $.$sub$n(this._remaining, 1);
      return;
    }
    sink._liblib6$_onData$1(inputEvent);
    return;
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$.Timer_run_closure = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.HashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$keys: function(_) {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.HashMap_values_closure(this));
  },
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true,
  $asMap: null
};

$$.IterableBase = {"": "Object;",
  map$1: function(_, f) {
    var $arguments, arguments0, t1;
    $arguments = this.$asIterableBase;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.MappedIterable$(this, f, t1, null);
  },
  where$1: function(_, f) {
    var $arguments, arguments0, t1;
    $arguments = this.$asIterableBase;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.WhereIterable$(this, f, t1);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1;
    $arguments = this.$asIterableBase;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.List_List$from(this, growable, t1);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {"": "Object;_liblib0$_length,_strings,_nums,_rest,_first,_last,_modifications",
  containsKey$1: function(_, key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_closure(this));
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    }
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function(_) {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys(this);
    return t1.map$1(t1, new $.LinkedHashMap_values_closure(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $isLinkedHashMap: true,
  $isMap: true,
  $asMap: null
};

$$.ListBase = {"": "Object+ListMixin;", $isList: true, $asList: null, $isIterable: true, $asIterable: null};

$$.ListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    if (typeof $length !== "number")
      return this.forEach$1$bailout(1, action, receiver, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  forEach$1$bailout: function(state0, action, receiver, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(receiver, i));
      if (!t1.$eq($length, this.get$length(receiver)))
        throw $.wrapException($.ConcurrentModificationError$(receiver));
    }
  },
  get$isEmpty: function(receiver) {
    return $.$eq(this.get$length(receiver), 0);
  },
  get$last: function(receiver) {
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
  },
  where$1: function(receiver, test) {
    var $arguments, arguments0, t1;
    $arguments = receiver.$asListMixin;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    return $.WhereIterable$(receiver, test, t1);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    var $arguments, arguments0, t1, result, t2, i;
    if (growable === true) {
      $arguments = receiver.$asListMixin;
      arguments0 = $.getRuntimeTypeInfo(receiver);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result = $.List_List($, t1);
      $arguments = receiver.$asListMixin;
      arguments0 = $.getRuntimeTypeInfo(receiver);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(result, this.get$length(receiver));
    } else {
      t1 = this.get$length(receiver);
      $arguments = receiver.$asListMixin;
      arguments0 = $.getRuntimeTypeInfo(receiver);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t2 = $arguments == null ? null : $arguments[0];
      result = $.List_List(t1, t2);
      $arguments = receiver.$asListMixin;
      arguments0 = $.getRuntimeTypeInfo(receiver);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      result.$builtinTypeInfo = [t1];
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i) {
      t1 = this.$index(receiver, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(receiver, element) {
    var t1 = this.get$length(receiver);
    this.set$length(receiver, $.$add$ns(t1, 1));
    this.$indexSet(receiver, t1, element);
  },
  addAll$1: function(receiver, iterable) {
    var t1, element, t2;
    for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();) {
      element = t1.get$current();
      t2 = this.get$length(receiver);
      this.set$length(receiver, $.$add$ns(t2, 1));
      this.$indexSet(receiver, t2, element);
    }
  },
  remove$1: function(receiver, element) {
    var i;
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(receiver)); ++i)
      if ($.$eq(this.$index(receiver, i), element)) {
        this.setRange$4(receiver, i, $.$sub$n(this.get$length(receiver), 1), receiver, i + 1);
        this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
        return true;
      }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeLast$0: function(receiver) {
    var result;
    if ($.$eq(this.get$length(receiver), 0))
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(receiver, $.$sub$n(this.get$length(receiver), 1));
    this.set$length(receiver, $.$sub$n(this.get$length(receiver), 1));
    return result;
  },
  _rangeCheck$2: function(receiver, start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(receiver)) === true)
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(receiver)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(receiver)) === true)
      throw $.wrapException($.RangeError$range(end, start, this.get$length(receiver)));
  },
  sublist$2: function(receiver, start, end) {
    var $length, $arguments, arguments0, t1, result, i;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    if (end == null)
      end = this.get$length(receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, receiver, $length);
    $arguments = receiver.$asListMixin;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    result = $.List_List($, t1);
    $arguments = receiver.$asListMixin;
    arguments0 = $.getRuntimeTypeInfo(receiver);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    result.$builtinTypeInfo = [t1];
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(receiver, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, receiver, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(receiver);
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var $arguments, arguments0, t1, result, i, t2;
        state0 = 0;
        $arguments = receiver.$asListMixin;
        arguments0 = $.getRuntimeTypeInfo(receiver);
        if ($arguments != null && $arguments.constructor === Array)
          ;
        else
          $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
        t1 = $arguments == null ? null : $arguments[0];
        result = $.List_List($, t1);
        $arguments = receiver.$asListMixin;
        arguments0 = $.getRuntimeTypeInfo(receiver);
        if ($arguments != null && $arguments.constructor === Array)
          ;
        else
          $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
        t1 = $arguments == null ? null : $arguments[0];
        result.$builtinTypeInfo = [t1];
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(receiver, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    var $length, otherStart, otherList, i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof end !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    if (typeof skipCount !== "number")
      return this.setRange$4$bailout(1, start, end, iterable, skipCount, receiver);
    this._rangeCheck$2(receiver, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw $.wrapException($.ArgumentError$(skipCount));
    otherStart = skipCount;
    otherList = iterable;
    if (typeof otherList !== "string" && (typeof otherList !== "object" || otherList === null || otherList.constructor !== Array && !$.getInterceptor(otherList).$isJavaScriptIndexingBehavior))
      return this.setRange$4$bailout(3, start, 0, 0, 0, receiver, $length, $.JSNumber_methods, otherList, otherStart);
    if (otherStart + $length > otherList.length)
      throw $.wrapException($.StateError$("Not enough elements"));
    if (otherStart < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = otherStart + i;
        if (t1 >>> 0 !== t1 || t1 >= otherList.length)
          throw $.ioore(t1);
        this.$indexSet(receiver, start + i, otherList[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, end, iterable, skipCount, receiver, $length, t1, otherList, otherStart, t2, t3, t4, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this._rangeCheck$2(receiver, start, end);
        $length = $.$sub$n(end, start);
        t1 = $.getInterceptor($length);
        if (t1.$eq($length, 0))
          return;
        if ($.$lt$n(skipCount, 0) === true)
          throw $.wrapException($.ArgumentError$(skipCount));
        otherStart = skipCount;
        otherList = iterable;
      case 3:
        state0 = 0;
        t2 = $.getInterceptor$ns(otherStart);
        t3 = t2.$add(otherStart, $length);
        t4 = $.getInterceptor$asx(otherList);
        t5 = t4.get$length(otherList);
      case 4:
        var i;
        state0 = 0;
        if ($.$gt$n(t3, t5) === true)
          throw $.wrapException($.StateError$("Not enough elements"));
        if (t2.$lt(otherStart, start) === true)
          for (i = t1.$sub($length, 1), t1 = $.getInterceptor$ns(start); t3 = $.getInterceptor$n(i), t3.$ge(i, 0) === true; i = t3.$sub(i, 1))
            this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t2.$add(otherStart, i)));
        else
          for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
            this.$indexSet(receiver, t1.$add(start, i), t4.$index(otherList, t2.$add(otherStart, i)));
    }
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListQueue = {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) === true || t1.$gt(index, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1)) === true)
      throw $.wrapException($.RangeError$range(index, 0, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var $arguments, arguments0, t1, list, t2;
    if (growable === true) {
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list = $.List_List($, t1);
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list.$builtinTypeInfo = [t1];
      $.JSArray_methods.set$length(list, $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1));
    } else {
      t1 = $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t2 = $arguments == null ? null : $arguments[0];
      list = $.List_List(t1, t2);
      $arguments = this.$asListQueue;
      arguments0 = $.getRuntimeTypeInfo(this);
      if ($arguments != null && $arguments.constructor === Array)
        ;
      else
        $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
      t1 = $arguments == null ? null : $arguments[0];
      list.$builtinTypeInfo = [t1];
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(this, element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, endSpace, preSpace;
    addCount = elements.length;
    $length = $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
    t1 = $.getInterceptor$ns($length);
    if ($.$ge$n(t1.$add($length, addCount), this._table.length) === true) {
      this._preGrow$1(t1.$add($length, addCount));
      t2 = this._table;
      t1 = t1.$add($length, addCount);
      if (!!t2.immutable$list)
        $.throwExpression($.UnsupportedError$("set range"));
      $.IterableMixinWorkaround_setRangeList(t2, $length, t1, elements, 0);
      this._tail = $.$add$ns(this._tail, addCount);
    } else {
      t1 = this._table;
      t2 = this._tail;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      endSpace = t1.length - t2;
      if (addCount < endSpace) {
        if (!!t1.immutable$list)
          $.throwExpression($.UnsupportedError$("set range"));
        $.IterableMixinWorkaround_setRangeList(t1, t2, t2 + addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        preSpace = addCount - endSpace;
        if (!!t1.immutable$list)
          $.throwExpression($.UnsupportedError$("set range"));
        $.IterableMixinWorkaround_setRangeList(t1, t2, t2 + endSpace, elements, 0);
        t1 = this._table;
        if (!!t1.immutable$list)
          $.throwExpression($.UnsupportedError$("set range"));
        $.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
        this._tail = preSpace;
      }
    }
    this._modificationCount = this._modificationCount + 1;
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object)) {
        this._liblib0$_remove$1(this, i);
        this._modificationCount = this._modificationCount + 1;
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(_, element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _liblib0$_remove$1: function(_, offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._liblib0$_remove$1$bailout(1, offset, t4, mask, startDistance);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 >>> 0 !== t3 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _liblib0$_remove$1$bailout: function(state0, offset, t1, mask, startDistance) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && $.JSInt_methods.$lt(startDistance, $.$and$n($.$sub$n(t1, offset), mask))) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 2:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 >>> 0 !== t3 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var t1, $arguments, arguments0, t2, newTable, split;
    t1 = this._table;
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[0];
    newTable = $.List_List(t1.length * 2, t2);
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    newTable.$builtinTypeInfo = [t1];
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    if (!!newTable.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      t2 = this._tail;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t2, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newCapacity, $arguments, arguments0, t1, newTable;
    newCapacity = $.ListQueue__nextPowerOf2(newElementCount);
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    newTable = $.List_List(newCapacity, t1);
    $arguments = this.$asListQueue;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    newTable.$builtinTypeInfo = [t1];
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib0$_position,_liblib0$_current",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    if ($.$eq(this._liblib0$_position, this._end)) {
      this._liblib0$_current = null;
      return false;
    }
    t2 = t1._table;
    t3 = this._liblib0$_position;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    this._liblib0$_current = t2[t3];
    this._liblib0$_position = $.$and$n($.$add$ns(this._liblib0$_position, 1), t1._table.length - 1);
    return true;
  }
};

$$._SplayTreeNode = {"": "Object;key>,left*,right*"};

$$._SplayTreeMapNode = {"": "_SplayTreeNode;value*,key,left,right"};

$$._SplayTree = {"": "Object;",
  _splay$1: function(key) {
    var current, left, right, left0, comp, t1, t2, tmp, current0;
    current = this._root;
    if (current == null)
      return -1;
    left = this._dummy;
    for (right = left, left0 = right, comp = null; true;) {
      t1 = $.getInterceptor$x(current);
      comp = this._compare$2(t1.get$key(current), key);
      t2 = $.getInterceptor$n(comp);
      if (t2.$gt(comp, 0) === true) {
        if (t1.get$left(current) == null)
          break;
        comp = this._compare$2($.get$key$x(t1.get$left(current)), key);
        if ($.$gt$n(comp, 0) === true) {
          tmp = t1.get$left(current);
          t2 = $.getInterceptor$x(tmp);
          t1.set$left(current, t2.get$right(tmp));
          t2.set$right(tmp, current);
          if (t2.get$left(tmp) == null) {
            current = tmp;
            break;
          }
          current = tmp;
        }
        $.set$left$x(right, current);
        current0 = $.get$left$x(current);
        right = current;
        current = current0;
      } else {
        if (t2.$lt(comp, 0) === true) {
          if (t1.get$right(current) == null)
            break;
          comp = this._compare$2($.get$key$x(t1.get$right(current)), key);
          if ($.$lt$n(comp, 0) === true) {
            tmp = t1.get$right(current);
            t2 = $.getInterceptor$x(tmp);
            t1.set$right(current, t2.get$left(tmp));
            t2.set$left(tmp, current);
            if (t2.get$right(tmp) == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          $.set$right$x(left0, current);
          current0 = $.get$right$x(current);
        } else
          break;
        left0 = current;
        current = current0;
      }
    }
    t1 = $.getInterceptor$x(current);
    $.set$right$x(left0, t1.get$left(current));
    $.set$left$x(right, t1.get$right(current));
    t1.set$left(current, left.right);
    t1.set$right(current, left.left);
    this._root = current;
    left.right = null;
    left.left = null;
    this._splayCount = this._splayCount + 1;
    return comp;
  },
  _liblib0$_remove$1: function(_, key) {
    var result, t1, t2, right;
    if (this._root == null)
      return;
    if (!$.$eq(this._splay$1(key), 0))
      return;
    result = this._root;
    this._count = this._count - 1;
    t1 = $.get$left$x(this._root);
    t2 = this._root;
    if (t1 == null)
      this._root = $.get$right$x(t2);
    else {
      right = $.get$right$x(t2);
      this._root = $.get$left$x(this._root);
      this._splay$1(key);
      $.set$right$x(this._root, right);
    }
    this._modificationCount = this._modificationCount + 1;
    return result;
  },
  _addNewRoot$2: function(node, comp) {
    var t1, t2;
    this._count = this._count + 1;
    this._modificationCount = this._modificationCount + 1;
    if (this._root == null) {
      this._root = node;
      return;
    }
    t1 = $.$lt$n(comp, 0);
    t2 = this._root;
    if (t1 === true) {
      node.left = t2;
      node.right = $.get$right$x(this._root);
      $.set$right$x(this._root, null);
    } else {
      node.right = t2;
      node.left = $.get$left$x(this._root);
      $.set$left$x(this._root, null);
    }
    this._root = node;
  }
};

$$.SplayTreeMap = {"": "_SplayTree;_comparator,_root,_dummy,_count,_modificationCount,_splayCount",
  _comparator$2: function(arg0, arg1) {
    return this._comparator.call$2(arg0, arg1);
  },
  _compare$2: function(key1, key2) {
    return this._comparator$2(key1, key2);
  },
  $index: function(_, key) {
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    if (this._root != null)
      if ($.$eq(this._splay$1(key), 0))
        return $.get$value$x(this._root);
    return;
  },
  remove$1: function(_, key) {
    var $arguments, arguments0, t1, mapRoot;
    $arguments = this.$asSplayTreeMap;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $.checkSubtypeOfRuntimeType(key, $arguments == null ? null : $arguments[0]);
    if (!t1)
      return;
    mapRoot = this._liblib0$_remove$1(this, key);
    if (mapRoot != null)
      return $.get$value$x(mapRoot);
    return;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $indexSet: function(_, key, value) {
    var comp;
    if (key == null)
      throw $.wrapException($.ArgumentError$(key));
    comp = this._splay$1(key);
    if (typeof comp !== "number")
      return this.$$indexSet$bailout(1, key, value, comp);
    if (comp === 0) {
      $.set$value$x(this._root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
  },
  $$indexSet$bailout: function(state0, key, value, comp) {
    if ($.$eq(comp, 0)) {
      $.set$value$x(this._root, value);
      return;
    }
    this._addNewRoot$2($._SplayTreeMapNode$(key, value), comp);
  },
  get$isEmpty: function(_) {
    return this._root == null;
  },
  forEach$1: function(_, f) {
    var nodes, node, t1;
    nodes = $._SplayTreeNodeIterator$(this);
    for (; nodes.moveNext$0();) {
      node = nodes.get$current();
      t1 = $.getInterceptor$x(node);
      f.call$2(t1.get$key(node), t1.get$value(node));
    }
  },
  get$length: function(_) {
    return this._count;
  },
  containsKey$1: function(_, key) {
    return $.$eq(this._splay$1(key), 0);
  },
  get$keys: function(_) {
    return $._SplayTreeKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0));
  },
  get$values: function(_) {
    return $._SplayTreeValueIterable$(this, $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 0), $.getRuntimeTypeArgument(this, this.$asSplayTreeMap, 1));
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  $isSplayTreeMap: true,
  $as_SplayTree: function (K, V) { return [K]; },
  $asMap: null,
  $isMap: true
};

$$._SplayTreeIterator = {"": "Object;",
  get$current: function() {
    var t1 = this._currentNode;
    if (t1 == null)
      return;
    return this._getValue$1(t1);
  },
  _findLeftMostDescendent$1: function(node) {
    var t1;
    for (t1 = this._workList; node != null;) {
      t1.push(node);
      node = $.get$left$x(node);
    }
  },
  _rebuildWorkList$1: function(currentNode) {
    var t1;
    $.JSArray_methods.set$length(this._workList, 0);
    t1 = this._tree;
    if (currentNode == null)
      this._findLeftMostDescendent$1(t1._root);
    else {
      t1._splay$1($.get$key$x(currentNode));
      this._findLeftMostDescendent$1($.get$right$x(t1._root));
    }
  },
  moveNext$0: function() {
    var t1, t2;
    t1 = this._tree;
    if (this._modificationCount !== t1._modificationCount)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    t2 = this._workList;
    if (t2.length === 0) {
      this._currentNode = null;
      return false;
    }
    if (t1._splayCount !== this._splayCount)
      this._rebuildWorkList$1(this._currentNode);
    if (0 >= t2.length)
      throw $.ioore(0);
    this._currentNode = t2.pop();
    this._findLeftMostDescendent$1($.get$right$x(this._currentNode));
    return true;
  },
  _SplayTreeIterator$1: function(tree) {
    this._findLeftMostDescendent$1(tree._root);
  }
};

$$._SplayTreeKeyIterable = {"": "IterableBase;_tree",
  get$length: function(_) {
    return this._tree._count;
  },
  get$isEmpty: function(_) {
    return this._tree._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeKeyIterator$(this._tree);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$._SplayTreeValueIterable = {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._count;
  },
  get$isEmpty: function(_) {
    return this._map._count === 0;
  },
  get$iterator: function(_) {
    return $._SplayTreeValueIterator$(this._map);
  },
  $asIterableBase: function (K, V) { return [V]; },
  $asIterable: function (K, V) { return [V]; }
};

$$._SplayTreeKeyIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$key$x(node);
  }
};

$$._SplayTreeValueIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return $.get$value$x(node);
  }
};

$$._SplayTreeNodeIterator = {"": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
  _getValue$1: function(node) {
    return node;
  }
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration + t1, 0, 0, 0);
  },
  $sub: function(_, other) {
    var t1 = other.get$_duration();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $.Duration$(0, 0, this._duration - t1, 0, 0, 0);
  },
  $mul: function(_, factor) {
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $lt: function(_, other) {
    return $.JSNumber_methods.$lt(this._duration, other.get$_duration());
  },
  $gt: function(_, other) {
    return $.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $le: function(_, other) {
    return $.JSNumber_methods.$le(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return $.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + $.S($.Duration$(0, 0, -t2, 0, 0, 0));
    t3 = $.JSNumber_methods.$tdiv(t2, 60000000);
    twoDigitMinutes = t1.call$1(t3 % 60);
    t3 = $.JSNumber_methods.$tdiv(t2, 1000000);
    twoDigitSeconds = t1.call$1(t3 % 60);
    sixDigitUs = new $.Duration_toString_sixDigits().call$1(t2 % 1000000);
    return $.S($.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Error = {"": "Object;"};

$$.AssertionError = {"": "Object;"};

$$.TypeError = {"": "Object;"};

$$.CastError = {"": "Object;"};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.FallThroughError = {"": "Object;"};

$$.AbstractClassInstantiationError = {"": "Object;_className",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, str, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      t4 = $.Error_safeToString(t2[t4]);
      t3._contents = t3._contents + t4;
    }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  },
  toString$0$bailout1: function(state0, t1, t2) {
    var t3, t4, t5, actualParameters, i, str, formalParameters;
    if (t2 != null)
      for (t3 = $.getInterceptor$asx(t2); $.$lt$n(t1.i_1, $.get$length$asx(t2)) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
        if ($.$gt$n(t1.i_1, 0) === true) {
          t4 = t1.sb_0;
          t4._contents = t4._contents + ", ";
        }
        t4 = t1.sb_0;
        t5 = $.Error_safeToString(t3.$index(t2, t1.i_1));
        t4._contents = t4._contents + t5;
      }
    t2 = this._namedArguments;
    if (t2 != null)
      $.forEach$1$ax(t2, new $.NoSuchMethodError_toString_closure(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.Error_safeToString(this._receiver) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.Error_safeToString(t1) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + $.S(this.name);
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {"": "Object;"};

$$.Map = {"": "Object;", $isMap: true, $asMap: null};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.Primitives_objectTypeName(this) + "'";
  },
  noSuchMethod$1: function(_, invocation) {
    throw $.wrapException($.NoSuchMethodError$(this, invocation.memberName._name, invocation.get$positionalArguments(), $._symbolMapToStringMap(invocation.get$namedArguments()), null));
  },
  $$dom_replaceChild$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("$dom_replaceChild", "$$dom_replaceChild$2", 0, [$0, $1], []));
  },
  $add: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("+", "$add", 0, [$0], []));
  },
  $and: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("&", "$and", 0, [$0], []));
  },
  $ge: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">=", "$ge", 0, [$0], []));
  },
  $gt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">", "$gt", 0, [$0], []));
  },
  $index: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]", "$index", 0, [$0], []));
  },
  $indexSet: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("[]=", "$indexSet", 0, [$0, $1], []));
  },
  $le: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<=", "$le", 0, [$0], []));
  },
  $lt: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<", "$lt", 0, [$0], []));
  },
  $mul: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("*", "$mul", 0, [$0], []));
  },
  $shl: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("<<", "$shl", 0, [$0], []));
  },
  $shr: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror(">>", "$shr", 0, [$0], []));
  },
  $sub: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("-", "$sub", 0, [$0], []));
  },
  $xor: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("^", "$xor", 0, [$0], []));
  },
  add$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("add", "add$1", 0, [$0], []));
  },
  addAll$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
  },
  call$1$growable: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$1$growable", 0, [$0], ["growable"]));
  },
  call$2$onError: function($0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$2$onError", 0, [$0, $1], ["onError"]));
  },
  call$3$async: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$async", 0, [$0, $1, $2], ["async"]));
  },
  call$3$onDone$onError: function($0, $1, $2) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$3$onDone$onError", 0, [$0, $1, $2], ["onDone", "onError"]));
  },
  call$4$cancelOnError$onDone$onError: function($0, $1, $2, $3) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("call", "call$4$cancelOnError$onDone$onError", 0, [$0, $1, $2, $3], ["cancelOnError", "onDone", "onError"]));
  },
  cancel$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cancel", "cancel$0", 0, [], []));
  },
  clone$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("clone", "clone$1", 0, [$0], []));
  },
  codeUnitAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("codeUnitAt", "codeUnitAt$1", 0, [$0], []));
  },
  compareTo$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], []));
  },
  contains$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
  },
  containsKey$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
  },
  elementAt$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("elementAt", "elementAt$1", 0, [$0], []));
  },
  forEach$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
  },
  get$caption: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("caption", "get$caption", 1, [], []));
  },
  get$cells: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("cells", "get$cells", 1, [], []));
  },
  get$children: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("children", "get$children", 1, [], []));
  },
  get$id: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id", "get$id", 1, [], []));
  },
  get$isEmpty: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("isEmpty", "get$isEmpty", 1, [], []));
  },
  get$iterator: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("iterator", "get$iterator", 1, [], []));
  },
  get$key: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("key", "get$key", 1, [], []));
  },
  get$keys: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("keys", "get$keys", 1, [], []));
  },
  get$left: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("left", "get$left", 1, [], []));
  },
  get$length: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length", "get$length", 1, [], []));
  },
  get$newValue: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("newValue", "get$newValue", 1, [], []));
  },
  get$next: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("next", "get$next", 1, [], []));
  },
  get$nextNode: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nextNode", "get$nextNode", 1, [], []));
  },
  get$nodes: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("nodes", "get$nodes", 1, [], []));
  },
  get$onClick: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("onClick", "get$onClick", 1, [], []));
  },
  get$parentNode: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("parentNode", "get$parentNode", 1, [], []));
  },
  get$remove: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "get$remove", 1, [], []));
  },
  get$responseText: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("responseText", "get$responseText", 1, [], []));
  },
  get$right: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("right", "get$right", 1, [], []));
  },
  get$rows: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("rows", "get$rows", 1, [], []));
  },
  get$tBodies: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tBodies", "get$tBodies", 1, [], []));
  },
  get$tFoot: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tFoot", "get$tFoot", 1, [], []));
  },
  get$tHead: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tHead", "get$tHead", 1, [], []));
  },
  get$tagName: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("tagName", "get$tagName", 1, [], []));
  },
  get$type: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type", "get$type", 1, [], []));
  },
  get$value: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value", "get$value", 1, [], []));
  },
  get$values: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("values", "get$values", 1, [], []));
  },
  insert$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("insert", "insert$0", 0, [], []));
  },
  insertBefore$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("insertBefore", "insertBefore$2", 0, [$0, $1], []));
  },
  map$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("map", "map$1", 0, [$0], []));
  },
  register$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
  },
  remove$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("remove", "remove$0", 0, [], []));
  },
  removeLast$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
  },
  replaceAll$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
  },
  replaceWith$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("replaceWith", "replaceWith$1", 0, [$0], []));
  },
  send$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$1", 0, [$0], []));
  },
  send$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("send", "send$2", 0, [$0, $1], []));
  },
  set$id: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("id=", "set$id", 2, [$0], []));
  },
  set$innerHtml: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("innerHtml=", "set$innerHtml", 2, [$0], []));
  },
  set$left: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("left=", "set$left", 2, [$0], []));
  },
  set$length: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("length=", "set$length", 2, [$0], []));
  },
  set$name: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("name=", "set$name", 2, [$0], []));
  },
  set$placeholder: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("placeholder=", "set$placeholder", 2, [$0], []));
  },
  set$right: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("right=", "set$right", 2, [$0], []));
  },
  set$text: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("text=", "set$text", 2, [$0], []));
  },
  set$title: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("title=", "set$title", 2, [$0], []));
  },
  set$type: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("type=", "set$type", 2, [$0], []));
  },
  set$value: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("value=", "set$value", 2, [$0], []));
  },
  stringifyValue$1: function($0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("stringifyValue", "stringifyValue$1", 0, [$0], []));
  },
  sublist$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("sublist", "sublist$1", 0, [$0], []));
  },
  substring$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$1", 0, [$0], []));
  },
  substring$2: function($receiver, $0, $1) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("substring", "substring$2", 0, [$0, $1], []));
  },
  toList$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$0", 0, [], []));
  },
  toList$1$growable: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toList", "toList$1$growable", 0, [$0], ["growable"]));
  },
  toLowerCase$0: function($receiver) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("toLowerCase", "toLowerCase$0", 0, [], []));
  },
  where$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("where", "where$1", 0, [$0], []));
  },
  write$1: function($receiver, $0) {
    return this.noSuchMethod$1(this, $.createInvocationMirror("write", "write$1", 0, [$0], []));
  }
};

$$.Match = {"": "Object;"};

$$.StringBuffer = {"": "Object;_contents@",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = $.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        iterator.get$current;
        str = iterator._liblib$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      iterator.get$current;
      str = iterator._liblib$_current;
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        iterator.get$current;
        str = iterator._liblib$_current;
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.Symbol = {"": "Object;", $isSymbol: true};

$$.Interceptor_ListMixin = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$.Interceptor_ListMixin_ImmutableListMixin = {"": "Interceptor_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$._ChildrenElementList = {"": "ListBase;_element,_childElements",
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnimplementedError$(null));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isElement) {
      t1 = this._element;
      if (object.parentNode === t1) {
        t1.removeChild(object);
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._element;
    result = t1.lastElementChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
};

$$._ElementFactoryProvider__getColgroup_closure = {"": "Closure;",
  call$1: function(n) {
    return $.$eq($.get$tagName$x(n), "COLGROUP");
  },
  $isFunction: true
};

$$.Entry_remove_closure = {"": "Closure;completer_0",
  call$0: function() {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(null);
  },
  $isFunction: true
};

$$.Entry_remove_closure0 = {"": "Closure;completer_1",
  call$1: function(error) {
    var t1 = this.completer_1;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(error);
  },
  $isFunction: true
};

$$.Interceptor_ListMixin0 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }};

$$.Interceptor_ListMixin_ImmutableListMixin0 = {"": "Interceptor_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.File]; }, $isIterable: true, $asIterable: function() { return [$.File]; }};

$$.Interceptor_ListMixin1 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin1 = {"": "Interceptor_ListMixin1+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin2 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin2 = {"": "Interceptor_ListMixin2+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.HttpRequest_getString_closure = {"": "Closure;",
  call$1: function(xhr) {
    return $.get$responseText$x(xhr);
  },
  $isFunction: true
};

$$.HttpRequest_request_closure = {"": "Closure;xhr_0",
  call$2: function(header, value) {
    this.xhr_0.setRequestHeader(header, value);
  },
  $isFunction: true
};

$$.HttpRequest_request_closure0 = {"": "Closure;completer_1,xhr_2",
  call$1: function(e) {
    var t1, t2, t3;
    t1 = this.xhr_2;
    t2 = t1.status;
    t3 = $.getInterceptor$n(t2);
    t2 = t3.$ge(t2, 200) && t3.$lt(t2, 300) || t2 === 0 || t2 === 304;
    t3 = this.completer_1;
    if (t2) {
      if (t3._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t3._isComplete = true;
      t3._setFutureValue$1(t1);
    } else {
      if (t3._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t3._isComplete = true;
      t3._setFutureError$1(e);
    }
  },
  $isFunction: true
};

$$.HttpRequest_request_closure1 = {"": "Closure;completer_3",
  call$1: function(e) {
    var t1 = this.completer_3;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(e);
  },
  $isFunction: true
};

$$.Interceptor_ListMixin3 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }};

$$.Interceptor_ListMixin_ImmutableListMixin3 = {"": "Interceptor_ListMixin3+ImmutableListMixin;", $isList: true, $asList: function() { return [$.MimeType]; }, $isIterable: true, $asIterable: function() { return [$.MimeType]; }};

$$._ChildNodeListLazy = {"": "ListBase;_this",
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i, t3;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i) {
          t3 = t1.childNodes;
          if (0 >= t3.length)
            throw $.ioore(0);
          t2.appendChild(t3[0]);
        }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeLast$0: function(_) {
    var t1, result, t2;
    t1 = this._this;
    result = t1.lastChild;
    t2 = result == null;
    if (t2)
      $.throwExpression($.StateError$("No elements"));
    if (!t2)
      t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object !== "object" || object === null || !$.getInterceptor(object).$isNode)
      return false;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return false;
    t1.removeChild(object);
    return true;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on Node list"));
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
};

$$.Interceptor_ListMixin4 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin4 = {"": "Interceptor_ListMixin4+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin5 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }};

$$.Interceptor_ListMixin_ImmutableListMixin5 = {"": "Interceptor_ListMixin5+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Plugin]; }, $isIterable: true, $asIterable: function() { return [$.Plugin]; }};

$$.EventTarget_ListMixin = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }};

$$.EventTarget_ListMixin_ImmutableListMixin = {"": "EventTarget_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SourceBuffer]; }, $isIterable: true, $asIterable: function() { return [$.SourceBuffer]; }};

$$.Interceptor_ListMixin6 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }};

$$.Interceptor_ListMixin_ImmutableListMixin6 = {"": "Interceptor_ListMixin6+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechGrammar]; }, $isIterable: true, $asIterable: function() { return [$.SpeechGrammar]; }};

$$.Storage_keys_closure = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return this.keys_0.push(k);
  },
  $isFunction: true
};

$$.Storage_values_closure = {"": "Closure;values_0",
  call$2: function(k, v) {
    return this.values_0.push(v);
  },
  $isFunction: true
};

$$.Interceptor_ListMixin7 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }};

$$.Interceptor_ListMixin_ImmutableListMixin7 = {"": "Interceptor_ListMixin7+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrackCue]; }, $isIterable: true, $asIterable: function() { return [$.TextTrackCue]; }};

$$.EventTarget_ListMixin0 = {"": "EventTarget+ListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }};

$$.EventTarget_ListMixin_ImmutableListMixin0 = {"": "EventTarget_ListMixin0+ImmutableListMixin;", $isList: true, $asList: function() { return [$.TextTrack]; }, $isIterable: true, $asIterable: function() { return [$.TextTrack]; }};

$$.Interceptor_ListMixin8 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$.Interceptor_ListMixin_ImmutableListMixin8 = {"": "Interceptor_ListMixin8+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Touch]; }, $isIterable: true, $asIterable: function() { return [$.Touch]; }};

$$.Interceptor_ListMixin9 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }};

$$.Interceptor_ListMixin_ImmutableListMixin9 = {"": "Interceptor_ListMixin9+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Rect]; }, $isIterable: true, $asIterable: function() { return [$.Rect]; }};

$$.Interceptor_ListMixin10 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }};

$$.Interceptor_ListMixin_ImmutableListMixin10 = {"": "Interceptor_ListMixin10+ImmutableListMixin;", $isList: true, $asList: function() { return [$.CssRule]; }, $isIterable: true, $asIterable: function() { return [$.CssRule]; }};

$$._CSSValue_ListMixin = {"": "_CSSValue+ListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }};

$$._CSSValue_ListMixin_ImmutableListMixin = {"": "_CSSValue_ListMixin+ImmutableListMixin;", $isList: true, $asList: function() { return [$._CSSValue]; }, $isIterable: true, $asIterable: function() { return [$._CSSValue]; }};

$$.Interceptor_ListMixin11 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }};

$$.Interceptor_ListMixin_ImmutableListMixin11 = {"": "Interceptor_ListMixin11+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Entry]; }, $isIterable: true, $asIterable: function() { return [$.Entry]; }};

$$.Interceptor_ListMixin12 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }};

$$.Interceptor_ListMixin_ImmutableListMixin12 = {"": "Interceptor_ListMixin12+ImmutableListMixin;", $isList: true, $asList: function() { return [$._EntrySync]; }, $isIterable: true, $asIterable: function() { return [$._EntrySync]; }};

$$.Interceptor_ListMixin13 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }};

$$.Interceptor_ListMixin_ImmutableListMixin13 = {"": "Interceptor_ListMixin13+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Gamepad]; }, $isIterable: true, $asIterable: function() { return [$.Gamepad]; }};

$$.Interceptor_ListMixin14 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin_ImmutableListMixin14 = {"": "Interceptor_ListMixin14+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Node]; }, $isIterable: true, $asIterable: function() { return [$.Node]; }};

$$.Interceptor_ListMixin15 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }};

$$.Interceptor_ListMixin_ImmutableListMixin15 = {"": "Interceptor_ListMixin15+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechInputResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechInputResult]; }};

$$.Interceptor_ListMixin16 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }};

$$.Interceptor_ListMixin_ImmutableListMixin16 = {"": "Interceptor_ListMixin16+ImmutableListMixin;", $isList: true, $asList: function() { return [$.SpeechRecognitionResult]; }, $isIterable: true, $asIterable: function() { return [$.SpeechRecognitionResult]; }};

$$.Interceptor_ListMixin17 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }};

$$.Interceptor_ListMixin_ImmutableListMixin17 = {"": "Interceptor_ListMixin17+ImmutableListMixin;", $isList: true, $asList: function() { return [$.StyleSheet]; }, $isIterable: true, $asIterable: function() { return [$.StyleSheet]; }};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function(_) {
    var t1, t2;
    t1 = this._target;
    if (t1 == null)
      return;
    t2 = this._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(t1, this._eventType, t2, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$.ImmutableListMixin = {"": "Object;",
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on immutable List."));
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.Rect = {"": "Object;left>,top>,width>,height>",
  get$right: function(_) {
    return $.$add$ns(this.left, this.width);
  },
  toString$0: function(_) {
    return "(" + $.S(this.left) + ", " + $.S(this.top) + ", " + $.S(this.width) + ", " + $.S(this.height) + ")";
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = $.getInterceptor$x(other);
    return $.$eq(this.left, t1.get$left(other)) && $.$eq(this.top, t1.get$top(other)) && $.$eq(this.width, t1.get$width(other)) && $.$eq(this.height, t1.get$height(other));
  },
  $isRect: true,
  $asRect: null
};

$$._WrappedList = {"": "ListBase;_liblib3$_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._liblib3$_list));
  },
  get$length: function(_) {
    return this._liblib3$_list.length;
  },
  add$1: function(_, element) {
    $.add$1$ax(this._liblib3$_list, element);
  },
  remove$1: function(_, element) {
    $.remove$1$ax(this._liblib3$_list, element);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  $index: function(_, index) {
    var t1 = this._liblib3$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._liblib3$_list;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  set$length: function(_, newLength) {
    $.set$length$asx(this._liblib3$_list, newLength);
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    $.setRange$4$ax(this._liblib3$_list, start, end, iterable, skipCount);
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
};

$$._WrappedIterator = {"": "Object;_liblib3$_iterator",
  moveNext$0: function() {
    return this._liblib3$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib3$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window"};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._length;
    if ($.$lt$n(nextPosition, t1) === true) {
      this._current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_closure = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList)) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t1 = this.readSlot_6;
      copy = t1.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t2 = e instanceof Array && !!!e.immutable$list;
      t3 = this.writeSlot_7;
      if (t2) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t1.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior)
              return this.call$1$bailout(2, e, t3, elementCopy, copy0, $.JSArray_methods, $length, slot, t1, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(3, e, 0, 0, 0, $.JSArray_methods, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.wrapException($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, copy0, t1, $length, slot, t2, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFile)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isBlob)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isFileList)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isImageData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isByteBuffer)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTypedData)
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          $.forEach$1$ax(e, new $._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
          return t1.copy_0;
        }
      default:
        var t3, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || !!$.getInterceptor(e).$isList))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t1 = $.getInterceptor$asx(e);
              $length = t1.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t2 = this.readSlot_6;
              copy = t2.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t3 = e instanceof Array && !!!e.immutable$list;
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t3)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t1.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t2.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t2 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t2.$indexSet(copy0, j, t1.$index(e, j));
                                  t2.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t2 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        throw $.wrapException($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_closure = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        key = t1.get$current();
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(2, e, copy, $length, slot, $.JSArray_methods);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, copy, $length, slot, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            key = t1.get$current();
            copy.$indexSet(copy, key, this.call$1(e[key]));
          }
          return copy;
        }
      case 2:
        var key, t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "ListBase;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_closure()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len) === true)
      return;
    else if (t1.$lt(newLength, 0) === true)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  setRange$4: function(_, start, end, iterable, skipCount) {
    throw $.wrapException($.UnsupportedError$("Cannot setRange on filtered list"));
  },
  removeRange$2: function(_, start, end) {
    $.IterableMixinWorkaround_forEach($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_closure());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (typeof element !== "object" || element === null || !$.getInterceptor(element).$isElement)
      return false;
    else
      element;
    for (i = 0; i < this.get$_filtered().length; ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return true;
      }
    }
    return false;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
};

$$.FilteredElementList__filtered_closure = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  },
  $isFunction: true
};

$$.FilteredElementList_removeRange_closure = {"": "Closure;",
  call$1: function(el) {
    return $.remove$0$ax(el);
  },
  $isFunction: true
};

$$.SupportedBrowser = {"": "Object;browserName,minimumVersion"};

$$.DomName = {"": "Object;name"};

$$._completeRequest_closure = {"": "Closure;request_0,completer_1",
  call$1: function(e) {
    var t1, t2;
    t1 = this.completer_1;
    t2 = this.request_0;
    t2.get$result;
    t2 = $._convertNativeToDart_IDBAny(t2.result);
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureValue$1(t2);
  },
  $isFunction: true
};

$$._completeRequest_closure0 = {"": "Closure;completer_2",
  call$1: function(e) {
    var t1 = this.completer_2;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1._setFutureError$1(e);
  },
  $isFunction: true
};

$$.ReceivePort = {"": "Object;", $isReceivePort: true};

$$.JsonUnsupportedObjectError = {"": "Object;unsupportedObject,cause",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$.JsonCyclicError = {"": "JsonUnsupportedObjectError;unsupportedObject,cause",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
};

$$._JsonStringifier = {"": "Object;sb<,seen",
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException($.JsonCyclicError$(object));
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = $.JsonUnsupportedObjectError$(object, null);
          throw $.wrapException(t1);
        }
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException($.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.JSNumber_methods.toString$0(object);
      t1._contents = t1._contents + t2;
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1._contents = t1._contents + "true";
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1._contents = t1._contents + "false";
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1._contents = t1._contents + "null";
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      $._JsonStringifier_escape(t1, object);
      t1._contents = t1._contents + "\"";
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.getInterceptor(object).$isJavaScriptIndexingBehavior))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1._contents = t1._contents + "[";
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t1._contents = t1._contents + ",";
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1._contents = t1._contents + "]";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2._contents = t2._contents + "{";
      t1.first_0 = true;
      $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
      t2._contents = t2._contents + "}";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.JSNumber_methods.toString$0(object);
          t1._contents = t1._contents + t2;
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1._contents = t1._contents + "true";
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1._contents = t1._contents + "false";
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1._contents = t1._contents + "null";
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  $._JsonStringifier_escape(t1, object);
                                  t1._contents = t1._contents + "\"";
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "[";
                                            t2 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t2.get$length(object), 0) === true) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; $.JSNumber_methods.$lt(i, t2.get$length(object)); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1._contents = t1._contents + "]";
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2._contents = t2._contents + "{";
                                        t1.first_0 = true;
                                        $.forEach$1$ax(object, new $._JsonStringifier_stringifyJsonValue_closure(t1, this));
                                        t2._contents = t2._contents + "}";
                                        t1 = this.seen;
                                        if (0 >= t1.length)
                                          throw $.ioore(0);
                                        t1.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$._JsonStringifier_stringifyJsonValue_closure = {"": "Closure;box_0,this_1",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = this.this_1;
    if (!t1.first_0) {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + ",\"");
    } else {
      t2 = t2.get$sb();
      t2.set$_contents(t2.get$_contents() + "\"");
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3.set$_contents(t3.get$_contents() + "\":");
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  },
  $isFunction: true
};

$$.Interceptor_ListMixin18 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }};

$$.Interceptor_ListMixin_ImmutableListMixin18 = {"": "Interceptor_ListMixin18+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Length]; }, $isIterable: true, $asIterable: function() { return [$.Length]; }};

$$.Interceptor_ListMixin19 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }};

$$.Interceptor_ListMixin_ImmutableListMixin19 = {"": "Interceptor_ListMixin19+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Number]; }, $isIterable: true, $asIterable: function() { return [$.Number]; }};

$$.Interceptor_ListMixin20 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }};

$$.Interceptor_ListMixin_ImmutableListMixin20 = {"": "Interceptor_ListMixin20+ImmutableListMixin;", $isList: true, $asList: function() { return [$.PathSeg]; }, $isIterable: true, $asIterable: function() { return [$.PathSeg]; }};

$$.Interceptor_ListMixin21 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$.Interceptor_ListMixin_ImmutableListMixin21 = {"": "Interceptor_ListMixin21+ImmutableListMixin;", $isList: true, $asList: function() { return [$.JSString]; }, $isIterable: true, $asIterable: function() { return [$.JSString]; }};

$$.Interceptor_ListMixin22 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }};

$$.Interceptor_ListMixin_ImmutableListMixin22 = {"": "Interceptor_ListMixin22+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Transform]; }, $isIterable: true, $asIterable: function() { return [$.Transform]; }};

$$.Interceptor_ListMixin23 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }};

$$.Interceptor_ListMixin_ImmutableListMixin23 = {"": "Interceptor_ListMixin23+ImmutableListMixin;", $isList: true, $asList: function() { return [$.ElementInstance]; }, $isIterable: true, $asIterable: function() { return [$.ElementInstance]; }};

$$.Endianness = {"": "Object;_littleEndian"};

$$.Interceptor_ListMixin24 = {"": "Interceptor+ListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }};

$$.Interceptor_ListMixin_ImmutableListMixin24 = {"": "Interceptor_ListMixin24+ImmutableListMixin;", $isList: true, $asList: function() { return [$.Map]; }, $isIterable: true, $asIterable: function() { return [$.Map]; }};

$$.loadDataContainerOnFirstLoad_closure = {"": "Closure;",
  call$1: function(responseText) {
    var jsonList, i, groupName, group, t1;
    document.createElement("details");
    jsonList = $.parse(responseText, null);
    if (typeof jsonList !== "string" && (typeof jsonList !== "object" || jsonList === null || jsonList.constructor !== Array && !$.getInterceptor(jsonList).$isJavaScriptIndexingBehavior))
      return this.call$1$bailout(1, jsonList);
    if ($.get$isEmpty$asx(jsonList))
      ;
    else
      for (i = 0; i < jsonList.length; ++i) {
        groupName = $.toString$0(jsonList[i]);
        group = document.createElement("details");
        $.appendHtml$1$x(group, "<summary>" + $.S(groupName) + "</summary>");
        t1 = $.get$children$x(document.querySelector("#data_container"));
        t1.add$1(t1, group);
      }
  },
  call$1$bailout: function(state0, jsonList) {
    var t1, i, groupName, group, t2;
    t1 = $.getInterceptor$asx(jsonList);
    if (t1.get$isEmpty(jsonList) === true)
      ;
    else
      for (i = 0; $.JSNumber_methods.$lt(i, t1.get$length(jsonList)); ++i) {
        groupName = $.toString$0(t1.$index(jsonList, i));
        group = document.createElement("details");
        $.appendHtml$1$x(group, "<summary>" + $.S(groupName) + "</summary>");
        t2 = $.get$children$x(document.querySelector("#data_container"));
        t2.add$1(t2, group);
      }
  },
  $isFunction: true
};

$$.renderControlsPanelOnFirstLoad_closure = {"": "Closure;",
  call$1: function(e) {
    $.set$display$x(document.querySelector("#overlay_shield").style, "inline");
    $.set$display$x(document.querySelector("#general_dialog").style, "inline");
    $.populateGeneralDialogForAddContact();
  },
  $isFunction: true
};

$$.renderControlsPanelOnFirstLoad_closure0 = {"": "Closure;",
  call$1: function(e) {
    window.alert("Under construction");
  },
  $isFunction: true
};

$$.populateGeneralDialogForAddContact_closure = {"": "Closure;",
  call$1: function(e) {
    var cellPhoneLE, t1, comment, network, number;
    cellPhoneLE = document.createElement("li");
    t1 = $.getInterceptor$x(cellPhoneLE);
    t1.appendHtml$1(cellPhoneLE, "<label>Comments: </label>");
    comment = $.InputElement_InputElement(null);
    $.set$name$x(comment, "cell_comment");
    cellPhoneLE.appendChild(comment);
    t1.appendHtml$1(cellPhoneLE, "<label>   Network: </label>");
    network = $.InputElement_InputElement("tel");
    $.set$name$x(network, "cell_network");
    cellPhoneLE.appendChild(network);
    t1.appendHtml$1(cellPhoneLE, "<label>   Number: </label>");
    number = $.InputElement_InputElement("tel");
    $.set$name$x(number, "cell_number");
    cellPhoneLE.appendChild(number);
    document.querySelector("#cell_phones_list").appendChild(cellPhoneLE);
  },
  $isFunction: true
};

$$.populateGeneralDialogForAddContact_closure0 = {"": "Closure;",
  call$1: function(e) {
    var landLineLE, t1, comment, country, areaCode, number;
    landLineLE = document.createElement("li");
    t1 = $.getInterceptor$x(landLineLE);
    t1.appendHtml$1(landLineLE, "<label>Comments: </label>");
    comment = $.InputElement_InputElement(null);
    $.set$name$x(comment, "land_line_comment");
    landLineLE.appendChild(comment);
    t1.appendHtml$1(landLineLE, "<label>   Country: </label>");
    country = $.InputElement_InputElement("tel");
    $.set$name$x(country, "line_country");
    landLineLE.appendChild(country);
    t1.appendHtml$1(landLineLE, "<label>   City/Area code: </label>");
    areaCode = $.InputElement_InputElement("tel");
    $.set$name$x(areaCode, "area_code");
    landLineLE.appendChild(areaCode);
    t1.appendHtml$1(landLineLE, "<label>   Number: </label>");
    number = $.InputElement_InputElement("tel");
    $.set$name$x(number, "line_number");
    landLineLE.appendChild(number);
    document.querySelector("#land_lines_list").appendChild(landLineLE);
  },
  $isFunction: true
};

$$.populateGeneralDialogForAddContact_closure1 = {"": "Closure;",
  call$1: function(e) {
    var contact, cellPhonesList, t1, cell, cellPhone, t2, groupInput, requestData, output, request;
    contact = $.JsonObject$(null);
    contact.set$name(contact, $.get$value$x(document.querySelector("#contact_name")));
    contact.set$comments($.get$value$x(document.querySelector("#contact_comments")));
    cellPhonesList = $.get$children$x(document.querySelector("#cell_phones_list"));
    if (!cellPhonesList.get$isEmpty(cellPhonesList)) {
      t1 = $.List_List($, $.JsonObject);
      t1.$builtinTypeInfo = [$.JsonObject];
      contact.set$cellPhoneList(t1);
      for (t1 = cellPhonesList.get$iterator(cellPhonesList); t1.moveNext$0() === true;) {
        cell = t1.get$current();
        cellPhone = $.JsonObject$(null);
        t2 = $.getInterceptor$x(cell);
        cellPhone.set$comment($.get$value$x($.$index$asx(t2.get$children(cell), 1)));
        cellPhone.set$network($.get$value$x($.$index$asx(t2.get$children(cell), 3)));
        cellPhone.set$number($.get$value$x($.$index$asx(t2.get$children(cell), 5)));
        $.add$1$ax(contact.get$cellPhoneList(), cellPhone);
      }
    }
    groupInput = document.querySelector("#add_contact_group_selection");
    requestData = $.JsonObject$(null);
    requestData.$indexSet(requestData, $.get$value$x(groupInput), contact);
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(requestData);
    $.Primitives_printString(output._contents);
    request = new XMLHttpRequest();
    $.HttpRequest_methods.open$3$async(request, "POST", $.JSString_methods.$add($.baseURL, "addSingleContact"), true);
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(requestData);
    request.send(output._contents);
    $.closeGeneralDialog();
  },
  $isFunction: true
};

$$.init_autogenerated_closure = {"": "Closure;",
  call$0: function() {
    var t1 = $.get$contactsBook()._objectData;
    return t1.get$keys(t1);
  },
  $isFunction: true
};

$$.init_autogenerated_closure0 = {"": "Closure;__html0_0",
  call$3: function($$list, $$index, __t) {
    $.$index$asx($$list, $$index);
    $.addAll$1$ax(__t, [document.createTextNode("\n        "), $.clone$1$x(this.__html0_0, true), document.createTextNode("\n      ")]);
  },
  $isFunction: true
};

$$.init_autogenerated_closure1 = {"": "Closure;",
  call$1: function($$event) {
    $.closeGeneralDialog();
  },
  $isFunction: true
};

$$.JsonObject = {"": "Object;_jsonString,_objectData,isExtendable",
  toString$0: function(_) {
    var t1, output;
    t1 = this._objectData;
    output = $.StringBuffer$("");
    $._JsonStringifier$(output).stringifyValue$1(t1);
    return output._contents;
  },
  toIterable$0: function() {
    var t1 = this._objectData;
    return t1.get$values(t1);
  },
  noSuchMethod$1: function(_, mirror) {
    var positionalArgs, property, t1;
    positionalArgs = mirror.get$positionalArguments() != null ? mirror.get$positionalArguments().length : 0;
    property = this._symbolToString$1(mirror.memberName);
    if (mirror.get$isGetter() && positionalArgs === 0) {
      t1 = this._objectData;
      if (t1.containsKey$1(t1, this._symbolToString$1(property))) {
        t1 = this._objectData;
        return t1.$index(t1, property);
      }
    } else if (mirror.get$isSetter() && positionalArgs === 1) {
      property = $.replaceAll$2$s(property, "=", "");
      t1 = mirror.get$positionalArguments();
      if (0 >= t1.length)
        throw $.ioore(0);
      this.$indexSet(this, property, t1[0]);
      t1 = this._objectData;
      return t1.$index(t1, property);
    }
    t1 = "Not found: " + $.S(property);
    if ($.enableJsonObjectDebugMessages)
      $.Primitives_printString(t1);
    t1 = "IsGetter: " + mirror.get$isGetter();
    if ($.enableJsonObjectDebugMessages)
      $.Primitives_printString(t1);
    t1 = "IsSetter: " + mirror.get$isGetter();
    if ($.enableJsonObjectDebugMessages)
      $.Primitives_printString(t1);
    t1 = "isAccessor: " + mirror.get$isAccessor();
    if ($.enableJsonObjectDebugMessages)
      $.Primitives_printString(t1);
    $.Object.prototype.noSuchMethod$1.call(this, this, mirror);
  },
  _symbolToString$1: function(value) {
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isSymbol)
      return value.get$_name();
    else
      return $.toString$0(value);
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toIterable$0());
  },
  map$1: function(_, f) {
    return $.map$1$ax(this.toIterable$0(), f);
  },
  where$1: function(_, f) {
    return $.where$1$ax(this.toIterable$0(), f);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this.toIterable$0(), index);
  },
  toList$1$growable: function(_, growable) {
    return $.toList$1$growable$ax(this.toIterable$0(), growable);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  containsKey$1: function(_, value) {
    var t1 = this._objectData;
    return t1.containsKey$1(t1, this._symbolToString$1(value));
  },
  $index: function(_, key) {
    var t1 = this._objectData;
    return t1.$index(t1, key);
  },
  forEach$1: function(_, func) {
    var t1 = this._objectData;
    return t1.forEach$1(t1, func);
  },
  get$keys: function(_) {
    var t1 = this._objectData;
    return t1.get$keys(t1);
  },
  get$values: function(_) {
    var t1 = this._objectData;
    return t1.get$values(t1);
  },
  get$length: function(_) {
    var t1 = this._objectData;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._objectData;
    return t1.get$isEmpty(t1);
  },
  $indexSet: function(_, key, value) {
    var t1;
    if (!this.isExtendable) {
      t1 = this._objectData;
      t1 = t1.containsKey$1(t1, this._symbolToString$1(key));
    } else
      t1 = true;
    if (t1) {
      t1 = this._objectData;
      t1.$indexSet(t1, key, value);
      return value;
    } else
      throw $.wrapException($.JsonObjectException$("JsonObject is not extendable"));
  },
  remove$1: function(_, key) {
    var t1;
    if (!this.isExtendable) {
      t1 = this._objectData;
      t1 = t1.containsKey$1(t1, this._symbolToString$1(key));
    } else
      t1 = true;
    if (t1) {
      t1 = this._objectData;
      return t1.remove$1(t1, key);
    } else
      throw $.wrapException($.JsonObjectException$("JsonObject is not extendable"));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  JsonObject$0: function(E) {
    this._objectData = $.Map_Map(null, null);
    this.isExtendable = true;
  },
  $isJsonObject: true,
  $isIterable: true,
  $asIterable: function (E) { return [null]; },
  $isMap: true,
  $asMap: function (E) { return [null, null]; }
};

$$.JsonObjectException = {"": "Object;_message",
  toString$0: function(_) {
    return "JsonObjectException: " + this._message;
  },
  $isException: true
};

$$.ChangeNotification = {"": "Object;oldValue,newValue>,changes",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isChangeNotification) {
      other;
      t1 = $.$eq(this.oldValue, other.oldValue) && $.$eq(this.newValue, other.newValue) && $.$eq(this.changes, other.changes);
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    return $.hash3(this.oldValue, this.newValue, this.changes);
  },
  toString$0: function(_) {
    var t1 = this.changes;
    if (t1 != null)
      return "#<ChangeNotification to " + $.S(this.newValue) + ": " + $.S(t1) + ">";
    return "#<ChangeNotification from " + $.S(this.oldValue) + " to " + $.S(this.newValue) + ">";
  },
  $isChangeNotification: true
};

$$.observe_closure = {"": "Closure;callback_0,obs_1",
  call$1: function(changes) {
    var t1 = this.obs_1;
    this.callback_0.call$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
};

$$._ExpressionObserver = {"": "Object;_liblib2$_id<,_expression,_liblib2$_callback,_debugName,_reads,_unobservers,_scheduled@,_liblib2$_value",
  _expression$0: function() {
    return this._expression.call$0();
  },
  _liblib2$_callback$1: function(arg0) {
    return this._liblib2$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1, t2;
    t1 = this._debugName;
    t2 = this._liblib2$_id;
    return t1 != null ? "<observer " + $.S(t2) + ": " + $.S(t1) + ">" : "<observer " + $.S(t2) + ">";
  },
  _observe$0: function(_) {
    var e, trace, $parent, t1, exception;
    $parent = $._activeObserver;
    $._activeObserver = this;
    try {
      this._liblib2$_value = this._expression$0();
      t1 = this._liblib2$_value;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable) && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isList) && true)
        this._liblib2$_value = $.toList$0$ax($.listSuperNativeTypeCast(t1, "$isIterable"));
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $._StackTrace$(exception.stack);
      $.onObserveUnhandledError.call$4(e, trace, this._expression, "from " + $.S(this));
      this._liblib2$_value = null;
    }

    t1 = this._reads;
    t1.forEach$1(t1, this.get$_watchForChange());
    if (t1._liblib0$_length > 0) {
      t1._keys = null;
      t1._rest = null;
      t1._nums = null;
      t1._strings = null;
      t1._liblib0$_length = 0;
    }
    $._activeObserver = $parent;
    this._observeValue$0();
    return this._unobservers.length > 0;
  },
  _runCallback$1: function(change) {
    var e, trace, exception, t1;
    try {
      this._liblib2$_callback$1(change);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $._StackTrace$(exception.stack);
      $.onObserveUnhandledError.call$4(e, trace, this._liblib2$_callback, "from " + $.S(this));
    }

  },
  _observeValue$0: function() {
    var value = this._liblib2$_value;
    return;
    if (value.get$$$_observers() == null)
      value.set$$$_observers($.LinkedList$(null));
    this._unobservers.push($.get$remove$ax($.add$1$ax(value.get$$$_observers(), new $._ExpressionObserver__observeValue_closure(this, value))));
  },
  _watchForChange$2: function(target, reads) {
    if (target.get$$$_observers() == null)
      target.set$$$_observers($.LinkedList$(null));
    this._unobservers.push($.get$remove$ax($.add$1$ax(target.get$$$_observers(), new $._ExpressionObserver__watchForChange_closure(this, reads))));
  },
  get$_watchForChange: function() {
    return new $.BoundClosure$2(this, "_watchForChange$2");
  },
  _unobserve$0: function() {
    for (var t1 = $.JSArray_methods.get$iterator(this._unobservers); t1.moveNext$0();)
      t1.get$current().call$0();
    this._scheduled = false;
  },
  get$_unobserve: function() {
    return new $.BoundClosure$0(this, "_unobserve$0");
  }
};

$$._ExpressionObserver__observeValue_closure = {"": "Closure;this_0,value_1",
  call$1: function(changes) {
    var t1 = this.value_1;
    this.this_0._runCallback$1($.ChangeNotification$(t1, t1, changes));
  },
  $isFunction: true
};

$$._ExpressionObserver__watchForChange_closure = {"": "Closure;this_0,reads_1",
  call$1: function(changes) {
    var t1, t2, t3, change, t4, t5, mask;
    t1 = this.this_0;
    if (t1.get$_scheduled() === true)
      return;
    t2 = $.get$iterator$ax(changes);
    t3 = this.reads_1;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !$.getInterceptor(t3).$isJavaScriptIndexingBehavior))
      return this.call$1$bailout(1, t1, t3, t2);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t4 = $.getInterceptor$x(change);
      t5 = t4.get$key(change);
      if (t5 >>> 0 !== t5 || t5 >= t3.length)
        throw $.ioore(t5);
      mask = t3[t5];
      if (mask != null && !$.$eq($.$and$n(mask, t4.get$type(change)), 0)) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1.get$_liblib2$_id(), t1);
        return;
      }
    }
  },
  call$1$bailout: function(state0, t1, t3, t2) {
    var t4, change, t5, mask;
    t4 = $.getInterceptor$asx(t3);
    for (; t2.moveNext$0() === true;) {
      change = t2.get$current();
      t5 = $.getInterceptor$x(change);
      mask = t4.$index(t3, t5.get$key(change));
      if (mask != null && !$.$eq($.$and$n(mask, t5.get$type(change)), 0)) {
        t1.set$_scheduled(true);
        if ($._changedExpressions == null)
          $._changedExpressions = $.SplayTreeMap$(null, null, null);
        t2 = $._changedExpressions;
        t2.$indexSet(t2, t1.get$_liblib2$_id(), t1);
        return;
      }
    }
  },
  $isFunction: true
};

$$.LinkedListNode = {"": "Object;_liblib1$_previous?,_liblib1$_next?,_list<,_liblib1$_value",
  get$next: function(_) {
    return this._liblib1$_next;
  },
  get$value: function(_) {
    return this._liblib1$_value;
  },
  set$value: function(_, e) {
    this._liblib1$_value = e;
    return e;
  },
  _link$2: function(p, n) {
    this._liblib1$_next = n;
    this._liblib1$_previous = p;
    if (p != null)
      p.set$_liblib1$_next(this);
    if (n != null)
      n.set$_liblib1$_previous(this);
    return this;
  },
  remove$0: function(_) {
    var t1, t2;
    t1 = this._list;
    if (t1 == null)
      return;
    t1._liblib1$_length = t1._liblib1$_length - 1;
    t1 = this._liblib1$_previous;
    t2 = this._liblib1$_next;
    if (t1 != null)
      t1.set$_liblib1$_next(t2);
    else
      this._list._liblib1$_head = t2;
    t1 = this._liblib1$_next;
    t2 = this._liblib1$_previous;
    if (t1 != null)
      t1.set$_liblib1$_previous(t2);
    else
      this._list._liblib1$_tail = t2;
    this._liblib1$_next = null;
    this._liblib1$_previous = null;
    this._list = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  LinkedListNode$_$2: function(value, _list, E) {
    var t1 = this._list;
    if (t1 != null)
      t1._liblib1$_length = t1._liblib1$_length + 1;
  },
  $isLinkedListNode: true
};

$$.LinkedList = {"": "IterableBase;_liblib1$_head,_liblib1$_tail,_liblib1$_length",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$head: function(_) {
    return this._liblib1$_head;
  },
  add$1: function(_, e) {
    var $arguments, arguments0, t1, node;
    $arguments = this.$asLinkedList;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    node = $.LinkedListNode$_(e, this, t1);
    t1 = this._liblib1$_tail;
    if (t1 == null) {
      this._liblib1$_tail = node;
      this._liblib1$_head = node;
      return node;
    }
    t1 = node._link$2(t1, null);
    this._liblib1$_tail = t1;
    return t1;
  },
  get$add: function(receiver) {
    return new $.BoundClosure$i1(this, "add$1", receiver);
  },
  addAll$1: function(_, e) {
    return $.JSArray_methods.forEach$1(e, this.get$add(this));
  },
  get$iterator: function(_) {
    return $.LinkedListIterator$(this);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedListIterator = {"": "Object;_copy,_list<,_liblib1$_current,_pos",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    do {
      this._pos = this._pos + 1;
      t1 = this._pos;
      t2 = this._copy;
      t3 = t2.length;
      if (t1 < t3) {
        if (t1 >>> 0 !== t1 || t1 >= t3)
          throw $.ioore(t1);
        t1 = !$.$eq(t2[t1].get$_list(), this._list);
      } else
        t1 = false;
    } while (t1);
    t1 = this._pos;
    t2 = this._copy;
    t3 = t2.length;
    if (t1 < t3) {
      if (t1 >>> 0 !== t1 || t1 >= t3)
        throw $.ioore(t1);
      this._liblib1$_current = $.get$value$x(t2[t1]);
      return true;
    } else {
      this._liblib1$_current = null;
      return false;
    }
  },
  LinkedListIterator$1: function(_list) {
    var t1, node, i, i0;
    t1 = this._list;
    t1 = $.List_List(t1.get$length(t1), $.LinkedListNode);
    $.setRuntimeTypeInfo(t1, [$.LinkedListNode]);
    this._copy = t1;
    t1 = this._list;
    node = t1.get$head(t1);
    for (i = 0; node != null; i = i0) {
      t1 = this._copy;
      i0 = i + 1;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = node;
      node = $.get$next$x(node);
    }
  }
};

$$.TemplateItem = {"": "Object;",
  create$0: function() {
  }
};

$$.Listener = {"": "TemplateItem;eventStream,_subscription,listener",
  insert$0: function(_) {
    this._subscription = this.eventStream.listen$1(this.listener);
  },
  remove$0: function(_) {
    $.cancel$0$x(this._subscription);
    this._subscription = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Template = {"": "TemplateItem;node,children>,nodes>",
  listen$2: function(stream, listener) {
    this.children.push($.Listener$(stream, new $.Template_listen_closure(listener)));
  },
  add$1: function(_, n) {
    return this.nodes.push(n);
  },
  addAll$1: function(_, list) {
    return $.JSArray_methods.addAll$1(this.nodes, list);
  },
  create$0: function() {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].create$0();
    }
  },
  insert$0: function(_) {
    var t1, len, i;
    for (t1 = this.children, len = t1.length, i = 0; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.insert$0$ax(t1[i]);
    }
  },
  remove$0: function(_) {
    var t1, i;
    for (t1 = this.children, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.set$length(t1, 0);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.Template_listen_closure = {"": "Closure;listener_0",
  call$1: function(e) {
    this.listener_0.call$1(e);
    $.dispatch();
  },
  $isFunction: true
};

$$.PlaceholderTemplate = {"": "Template;",
  stopper$0: function() {
    return this.stopper.call$0();
  },
  create$0: function() {
  },
  insert$0: function(_) {
    var t1, t2, t3, $parent, reference, i;
    $.Template.prototype.create$0.call(this);
    t1 = this.nodes;
    t2 = t1.length;
    if (t2 > 0) {
      t3 = this.node;
      $parent = $.get$parentNode$x(t3);
      reference = $.get$nextNode$x(t3);
      for (t3 = $.getInterceptor$x($parent), i = 0; i < t2; ++i) {
        if (i >= t1.length)
          throw $.ioore(i);
        t3.insertBefore$2($parent, t1[i], reference);
      }
    }
    $.Template.prototype.insert$0.call(this, this);
  },
  remove$0: function(_) {
    var t1, i;
    $.Template.prototype.remove$0.call(this, this);
    for (t1 = this.nodes, i = t1.length - 1; i >= 0; --i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.remove$0$ax(t1[i]);
    }
    $.JSArray_methods.set$length(t1, 0);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplate = {"": "PlaceholderTemplate;iterSetup,exp,stopper,node,children,nodes",
  iterSetup$3: function(arg0, arg1, arg2) {
    return this.iterSetup.call$3(arg0, arg1, arg2);
  },
  insert$0: function(_) {
    this.stopper = $.watchAndInvoke(this.exp, new $.LoopTemplate_insert_closure(this), "loop-binding");
  },
  remove$0: function(_) {
    $.PlaceholderTemplate.prototype.remove$0.call(this, this);
    this.stopper$0();
    this.stopper = null;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.LoopTemplate_insert_closure = {"": "Closure;this_0",
  call$1: function(e) {
    var t1, list, i;
    t1 = this.this_0;
    $.PlaceholderTemplate.prototype.remove$0.call($.getInterceptor$ax(t1), t1);
    list = $.get$newValue$x(e);
    for (i = 0; $.JSNumber_methods.$lt(i, $.get$length$asx(list)); ++i)
      t1.iterSetup$3(list, i, t1);
    $.PlaceholderTemplate.prototype.insert$0.call($.getInterceptor$ax(t1), t1);
  },
  $isFunction: true
};

$$.watch_closure4 = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$.watch_closure = {"": "Closure;target_0",
  call$0: function() {
    return $.toList$0$ax(this.target_0.call$0());
  },
  $isFunction: true
};

$$.watch_closure0 = {"": "Closure;target_1",
  call$0: function() {
    return this.target_1;
  },
  $isFunction: true
};

$$.watch_closure1 = {"": "Closure;target_2",
  call$0: function() {
    return $.toList$0$ax(this.target_2);
  },
  $isFunction: true
};

$$.watch_closure2 = {"": "Closure;target_3",
  call$0: function() {
    return this.target_3;
  },
  $isFunction: true
};

$$.watch_closure3 = {"": "Closure;target_4",
  call$0: function() {
    return this.target_4;
  },
  $isFunction: true
};

$$._Watcher = {"": "Object;debugName,_getter,_liblib4$_callback,_lastValue",
  _getter$0: function() {
    return this._getter.call$0();
  },
  _liblib4$_callback$1: function(arg0) {
    return this._liblib4$_callback.call$1(arg0);
  },
  toString$0: function(_) {
    var t1 = this.debugName;
    return t1;
  },
  compareAndNotify$0: function() {
    var currentValue, oldValue;
    currentValue = this._safeRead$0();
    if (this._liblib4$_compare$1(currentValue) === true) {
      oldValue = this._lastValue;
      this._update$1(currentValue);
      this._liblib4$_callback$1($.ChangeNotification$(oldValue, currentValue, null));
      return true;
    }
    return false;
  },
  _liblib4$_compare$1: function(currentValue) {
    return !$.$eq(this._lastValue, currentValue);
  },
  _update$1: function(currentValue) {
    this._lastValue = currentValue;
  },
  _safeRead$0: function() {
    var e, trace, t1, exception;
    try {
      t1 = this._getter$0();
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $._StackTrace$(exception.stack);
      $.Primitives_printString("error: evaluating " + $.S(this) + " watcher threw an exception (" + $.S(e) + ", " + $.S(trace) + ")");
    }

    return this._lastValue;
  },
  _Watcher$3: function(_getter, _callback, debugName) {
    this._lastValue = this._getter$0();
  },
  $is_Watcher: true
};

$$._ListWatcher = {"": "_Watcher;debugName,_getter,_liblib4$_callback,_lastValue",
  _liblib4$_compare$1: function(currentValue) {
    return $._iterablesNotEqual(this._lastValue, currentValue);
  },
  _update$1: function(currentValue) {
    var $arguments, arguments0, t1;
    $arguments = this.$as_ListWatcher;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    this._lastValue = $.List_List$from(currentValue, true, t1);
  },
  _ListWatcher$3: function(getter, callback, debugName, T) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._HashMapWatcher = {"": "_Watcher;debugName,_getter,_liblib4$_callback,_lastValue",
  _liblib4$_compare$1: function(currentValue) {
    var keys, t1, t2, keyIterator, key;
    keys = $.get$keys$x(this._lastValue);
    t1 = $.getInterceptor$asx(keys);
    t2 = $.getInterceptor$x(currentValue);
    if (!$.$eq(t1.get$length(keys), $.get$length$asx(t2.get$keys(currentValue))))
      return true;
    keyIterator = t1.get$iterator(keys);
    for (; keyIterator.moveNext$0() === true;) {
      key = keyIterator.get$current();
      if (t2.containsKey$1(currentValue, key) !== true)
        return true;
      if (!$.$eq($.$index$asx(this._lastValue, key), t2.$index(currentValue, key)))
        return true;
    }
    return false;
  },
  _update$1: function(currentValue) {
    var $arguments, arguments0, t1, t2;
    $arguments = this.$as_HashMapWatcher;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    if ($arguments == null)
      ;
    $arguments = this.$as_HashMapWatcher;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    if ($arguments == null)
      ;
    $arguments = this.$as_HashMapWatcher;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t1 = $arguments == null ? null : $arguments[0];
    $arguments = this.$as_HashMapWatcher;
    arguments0 = $.getRuntimeTypeInfo(this);
    if ($arguments != null && $arguments.constructor === Array)
      ;
    else
      $arguments = typeof $arguments == "function" ? $arguments.apply(null, arguments0) : arguments0;
    t2 = $arguments == null ? null : $arguments[1];
    t2 = $.HashMap$(t1, t2);
    t2.addAll$1(t2, currentValue);
    this._lastValue = t2;
  },
  _HashMapWatcher$3: function(getter, callback, debugName, K, V) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._OrderDependantMapWatcher = {"": "_Watcher;debugName,_getter,_liblib4$_callback,_lastValue",
  _liblib4$_compare$1: function(currentValue) {
    var t1 = $.getInterceptor$x(currentValue);
    return $._iterablesNotEqual(t1.get$keys(currentValue), $.get$keys$x(this._lastValue)) === true || $._iterablesNotEqual(t1.get$values(currentValue), $.get$values$x(this._lastValue)) === true;
  },
  _update$1: function(currentValue) {
    var t1 = $.LinkedHashMap$(null, null);
    t1.addAll$1(t1, currentValue);
    this._lastValue = t1;
  },
  _OrderDependantMapWatcher$3: function(getter, callback, debugName) {
    this._update$1(this._safeRead$0());
  },
  $as_Watcher: null
};

$$._WatcherType = {"": "Object;_liblib4$_value",
  toString$0: function(_) {
    return "Enum." + this._liblib4$_value;
  }
};

// Native classes
$$._HTMLElement = {"": "Element;"};

$$.AbstractWorker = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.AnchorElement = {"": "Element;name},type%",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.ApplicationCache = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.AreaElement = {"": "Element;"};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.AutocompleteErrorEvent = {"": "Event;"};

$$.BRElement = {"": "Element;"};

$$.BarInfo = {"": "Interceptor;"};

$$.BaseElement = {"": "Element;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;type=", $isBlob: true, $asBlob: null};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;name},type%,value%"};

$$.CDataSection = {"": "Text;"};

$$.Canvas2DContextAttributes = {"": "Interceptor;"};

$$.CanvasElement = {"": "Element;"};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;"};

$$.CharacterData = {"": "Node;length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.Composition = {"": "Interceptor;"};

$$.CompositionEvent = {"": "UIEvent;"};

$$.ContentElement = {"": "Element;"};

$$.Coordinates = {"": "Interceptor;"};

$$.Crypto = {"": "Interceptor;"};

$$.Css = {"": "Interceptor;"};

$$.CssCharsetRule = {"": "CssRule;"};

$$.CssFilterRule = {"": "CssRule;"};

$$.CssFontFaceLoadEvent = {"": "Event;"};

$$.CssFontFaceRule = {"": "CssRule;"};

$$.CssHostRule = {"": "CssRule;"};

$$.CssImportRule = {"": "CssRule;"};

$$.CssKeyframeRule = {"": "CssRule;"};

$$.CssKeyframesRule = {"": "CssRule;name}"};

$$.CssMediaRule = {"": "CssRule;"};

$$.CssPageRule = {"": "CssRule;"};

$$.CssRegionRule = {"": "CssRule;"};

$$.CssRule = {"": "Interceptor;type="};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  setProperty$3: function(receiver, propertyName, value, priority) {
    var exception;
    try {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
      if (!!receiver.setAttribute)
        receiver.setAttribute(propertyName, value);
    } catch (exception) {
      $.unwrapException(exception);
    }

  },
  set$display: function(receiver, value) {
    this.setProperty$3(receiver, "display", value, "");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  set$left: function(receiver, value) {
    this.setProperty$3(receiver, "left", value, "");
  },
  get$right: function(receiver) {
    return this.getPropertyValue$1(receiver, "right");
  },
  set$right: function(receiver, value) {
    this.setProperty$3(receiver, "right", value, "");
  }
};

$$.CssStyleRule = {"": "CssRule;"};

$$.CssStyleSheet = {"": "StyleSheet;"};

$$.CssSupportsRule = {"": "CssRule;"};

$$.CssUnknownRule = {"": "CssRule;"};

$$.CustomElementConstructor = {"": "Interceptor;"};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataTransfer = {"": "Interceptor;"};

$$.DataTransferItem = {"": "Interceptor;type="};

$$.DataTransferItemList = {"": "Interceptor;length=",
  add$2: function(receiver, data_OR_file, type) {
    return receiver.add(data_OR_file, type);
  },
  add$1: function($receiver, data_OR_file) {
    return $receiver.add(data_OR_file);
  }
};

$$.DetailsElement = {"": "Element;"};

$$.DeviceAcceleration = {"": "Interceptor;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DeviceRotationRate = {"": "Interceptor;"};

$$.DialogElement = {"": "Element;"};

$$.DirectoryEntry = {"": "Entry;"};

$$.DirectoryReader = {"": "Interceptor;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;",
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver, null);
    return receiver._children;
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), false, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.DomImplementation = {"": "Interceptor;"};

$$.DomParser = {"": "Interceptor;"};

$$.DomSettableTokenList = {"": "DomTokenList;value%"};

$$.DomStringList = {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.DomTokenList = {"": "Interceptor;length=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id%,innerHtml:innerHTML},title},tagName=",
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  appendHtml$1: function(receiver, text) {
    this.insertAdjacentHtml$2(receiver, "beforeend", text);
  },
  insertAdjacentHtml$2: function(receiver, where, text) {
    var fragment;
    if (!!receiver.insertAdjacentHtml)
      receiver._insertAdjacentHtml$2(where, text);
    else {
      fragment = $.document().createDocumentFragment();
      $.set$innerHtml$x(fragment, text);
      this._insertAdjacentNode$2(receiver, where, fragment);
    }
  },
  _insertAdjacentNode$2: function(receiver, where, node) {
    var t1, first;
    switch (where.toLowerCase()) {
      case "beforebegin":
        receiver.parentNode.insertBefore(node, receiver);
        break;
      case "afterbegin":
        if ($._ChildNodeListLazy$(receiver)._this.childNodes.length > 0) {
          t1 = $._ChildNodeListLazy$(receiver)._this.childNodes;
          if (0 >= t1.length)
            throw $.ioore(0);
          first = t1[0];
        } else
          first = null;
        receiver.insertBefore(node, first);
        break;
      case "beforeend":
        receiver.appendChild(node);
        break;
      case "afterend":
        receiver.parentNode.insertBefore(node, receiver.nextSibling);
        break;
      default:
        throw $.wrapException($.ArgumentError$("Invalid position " + where));
    }
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {"": "Element;name},type%"};

$$.Entry = {"": "Interceptor;",
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._AsyncCompleter$(null);
    this._remove$2(receiver, new $.Entry_remove_closure(completer), new $.Entry_remove_closure0(completer));
    return completer.future;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  }
};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;type="};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {"": "Element;name},type="};

$$.File = {"": "Blob;", $isFile: true, $asFile: null};

$$.FileEntry = {"": "Entry;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileList = {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isFileList: true,
  $asFileList: null,
  $isList: true,
  $asList: function() { return [$.File]; },
  $isIterable: true,
  $asIterable: function() { return [$.File]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.FileReader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FileSystem = {"": "Interceptor;"};

$$.FileWriter = {"": "EventTarget;length=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FontLoader = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FormData = {"": "Interceptor;"};

$$.FormElement = {"": "Element;length=,name}"};

$$.Gamepad = {"": "Interceptor;id="};

$$.Geolocation = {"": "Interceptor;"};

$$.Geoposition = {"": "Interceptor;"};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.History = {"": "Interceptor;length="};

$$.HtmlAllCollection = {"": "Interceptor_ListMixin_ImmutableListMixin1;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlCollection = {"": "Interceptor_ListMixin_ImmutableListMixin2;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {"": "Document;",
  set$title: function(receiver, value) {
    receiver.title = value;
  }
};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequest = {"": "EventTarget;responseText=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  open$5$async$password$user: function(receiver, method, url, async, password, user) {
    return receiver.open(method, url, async, user, password);
  },
  open$3$async: function($receiver, method, url, async) {
    return $receiver.open(method, url, async);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  $isHttpRequest: true,
  $asHttpRequest: null
};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.HttpRequestUpload = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.IFrameElement = {"": "Element;name}"};

$$.ImageData = {"": "Interceptor;", $isImageData: true, $asImageData: null};

$$.ImageElement = {"": "Element;"};

$$.InputElement = {"": "Element;name},placeholder},type%,value%", $isElement: true, $asElement: null, $isNode: true, $asNode: null};

$$.InputMethodContext = {"": "Interceptor;"};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;name},type="};

$$.LIElement = {"": "Element;type%,value%"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;type%"};

$$.Location = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.MapElement = {"": "Element;name}"};

$$.MediaController = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;"};

$$.MediaList = {"": "Interceptor;length="};

$$.MediaQueryList = {"": "Interceptor;"};

$$.MediaSource = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStream = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamEvent = {"": "Event;"};

$$.MediaStreamTrack = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MemoryInfo = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MessageChannel = {"": "Interceptor;"};

$$.MessageEvent = {"": "Event;"};

$$.MessagePort = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MetaElement = {"": "Element;name}"};

$$.Metadata = {"": "Interceptor;"};

$$.MeterElement = {"": "Element;value%"};

$$.MidiConnectionEvent = {"": "Event;"};

$$.MidiMessageEvent = {"": "Event;"};

$$.MidiPort = {"": "EventTarget;id=,type=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.MimeType = {"": "Interceptor;type="};

$$.MimeTypeArray = {"": "Interceptor_ListMixin_ImmutableListMixin3;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.MimeType]; },
  $isIterable: true,
  $asIterable: function() { return [$.MimeType]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;newValue="};

$$.MutationObserver = {"": "Interceptor;"};

$$.MutationRecord = {"": "Interceptor;type="};

$$.NamedFlow = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.NamedFlowCollection = {"": "Interceptor;length="};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;nextNode:nextSibling=,parentNode=,text:textContent}",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i0(this, "remove$0", receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  insertBefore$2: function(receiver, newChild, refChild) {
    return receiver.insertBefore(newChild, refChild);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  },
  $isNode: true,
  $asNode: null
};

$$.NodeFilter = {"": "Interceptor;"};

$$.NodeIterator = {"": "Interceptor;",
  nextNode$0: function(receiver) {
    return receiver.nextNode();
  },
  get$nextNode: function(receiver) {
    return new $.BoundClosure$i0(this, "nextNode$0", receiver);
  }
};

$$.NodeList = {"": "Interceptor_ListMixin_ImmutableListMixin4;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {"": "Node;"};

$$.Notification = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  cancel$0: function(receiver) {
    return receiver.cancel();
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.NotificationCenter = {"": "Interceptor;"};

$$.OListElement = {"": "Element;type%"};

$$.ObjectElement = {"": "Element;name},type%"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;value%"};

$$.OutputElement = {"": "Element;name},type=,value%"};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;name},value%"};

$$.Path = {"": "Interceptor;"};

$$.Performance = {"": "EventTarget;"};

$$.PerformanceEntry = {"": "Interceptor;"};

$$.PerformanceMark = {"": "PerformanceEntry;"};

$$.PerformanceMeasure = {"": "PerformanceEntry;"};

$$.PerformanceNavigation = {"": "Interceptor;type="};

$$.PerformanceResourceTiming = {"": "PerformanceEntry;"};

$$.PerformanceTiming = {"": "Interceptor;"};

$$.Plugin = {"": "Interceptor;length="};

$$.PluginArray = {"": "Interceptor_ListMixin_ImmutableListMixin5;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Plugin]; },
  $isIterable: true,
  $asIterable: function() { return [$.Plugin]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PopStateEvent = {"": "Event;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;"};

$$.ProgressElement = {"": "Element;value%"};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.Range = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannel = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfSender = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidate = {"": "Interceptor;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.RtcPeerConnection = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.RtcSessionDescription = {"": "Interceptor;type%"};

$$.RtcStatsReport = {"": "Interceptor;id=,type="};

$$.RtcStatsResponse = {"": "Interceptor;"};

$$.Screen = {"": "Interceptor;"};

$$.ScriptElement = {"": "Element;type%"};

$$.ScriptProfile = {"": "Interceptor;"};

$$.ScriptProfileNode = {"": "Interceptor;",
  children$0: function(receiver) {
    return receiver.children();
  },
  get$children: function(receiver) {
    return new $.BoundClosure$i0(this, "children$0", receiver);
  }
};

$$.SecurityPolicy = {"": "Interceptor;"};

$$.SecurityPolicyViolationEvent = {"": "Event;"};

$$.SelectElement = {"": "Element;length=,name},type=,value%"};

$$.Selection = {"": "Interceptor;type=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}",
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
};

$$.SourceBuffer = {"": "Interceptor;"};

$$.SourceBufferList = {"": "EventTarget_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function() { return [$.SourceBuffer]; },
  $isIterable: true,
  $asIterable: function() { return [$.SourceBuffer]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SourceElement = {"": "Element;type%"};

$$.SpanElement = {"": "Element;"};

$$.SpeechGrammar = {"": "Interceptor;"};

$$.SpeechGrammarList = {"": "Interceptor_ListMixin_ImmutableListMixin6;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechGrammar]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechGrammar]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechInputResult = {"": "Interceptor;"};

$$.SpeechRecognition = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.SpeechRecognitionAlternative = {"": "Interceptor;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.SpeechRecognitionResult = {"": "Interceptor;length="};

$$.SpeechSynthesis = {"": "Interceptor;",
  cancel$0: function(receiver) {
    return receiver.cancel();
  }
};

$$.SpeechSynthesisEvent = {"": "Event;"};

$$.SpeechSynthesisUtterance = {"": "EventTarget;text}"};

$$.SpeechSynthesisVoice = {"": "Interceptor;"};

$$.Storage = {"": "Interceptor;",
  containsKey$1: function(receiver, key) {
    return receiver.getItem(key) != null;
  },
  $index: function(receiver, key) {
    return receiver.getItem(key);
  },
  $indexSet: function(receiver, key, value) {
    receiver.setItem(key, value);
  },
  remove$1: function(receiver, key) {
    var value = receiver.getItem(key);
    receiver.removeItem(key);
    return value;
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = receiver.key(i);
      if (key == null)
        return;
      f.call$2(key, receiver.getItem(key));
    }
  },
  get$keys: function(receiver) {
    var keys = [];
    this.forEach$1(receiver, new $.Storage_keys_closure(keys));
    return keys;
  },
  get$values: function(receiver) {
    var values = [];
    this.forEach$1(receiver, new $.Storage_values_closure(values));
    return values;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  get$isEmpty: function(receiver) {
    return receiver.key(0) == null;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
};

$$.StorageEvent = {"": "Event;key=,newValue="};

$$.StorageInfo = {"": "Interceptor;"};

$$.StorageQuota = {"": "Interceptor;"};

$$.StyleElement = {"": "Element;type%"};

$$.StyleMedia = {"": "Interceptor;type="};

$$.StyleSheet = {"": "Interceptor;type="};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;", $isTableCellElement: true, $asTableCellElement: null};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;caption=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$(receiver.tBodies, $.TableSectionElement);
  },
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "Element;",
  get$cells: function(receiver) {
    return $._WrappedList$(receiver.cells, $.TableCellElement);
  },
  $isTableRowElement: true,
  $asTableRowElement: null
};

$$.TableSectionElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  },
  $isTableSectionElement: true,
  $asTableSectionElement: null
};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;name},placeholder},rows=,type=,value%"};

$$.TextEvent = {"": "UIEvent;"};

$$.TextMetrics = {"": "Interceptor;"};

$$.TextTrack = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.TextTrackCue = {"": "EventTarget;id%,text}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.TextTrackCueList = {"": "Interceptor_ListMixin_ImmutableListMixin7;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function() { return [$.TextTrackCue]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrackCue]; }
};

$$.TextTrackList = {"": "EventTarget_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $isList: true,
  $asList: function() { return [$.TextTrack]; },
  $isIterable: true,
  $asIterable: function() { return [$.TextTrack]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TimeRanges = {"": "Interceptor;length="};

$$.TitleElement = {"": "Element;"};

$$.Touch = {"": "Interceptor;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TouchList = {"": "Interceptor_ListMixin_ImmutableListMixin8;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Touch]; },
  $isIterable: true,
  $asIterable: function() { return [$.Touch]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.TreeWalker = {"": "Interceptor;",
  nextNode$0: function(receiver) {
    return receiver.nextNode();
  },
  get$nextNode: function(receiver) {
    return new $.BoundClosure$i0(this, "nextNode$0", receiver);
  },
  parentNode$0: function(receiver) {
    return receiver.parentNode();
  },
  get$parentNode: function(receiver) {
    return new $.BoundClosure$i0(this, "parentNode$0", receiver);
  }
};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.Url = {"": "Interceptor;"};

$$.ValidityState = {"": "Interceptor;"};

$$.VideoElement = {"": "MediaElement;"};

$$.WebSocket = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  }
};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;name}",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.Worker = {"": "AbstractWorker;"};

$$.XPathEvaluator = {"": "Interceptor;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.XPathExpression = {"": "Interceptor;"};

$$.XPathNSResolver = {"": "Interceptor;"};

$$.XPathResult = {"": "Interceptor;"};

$$.XmlSerializer = {"": "Interceptor;"};

$$.XsltProcessor = {"": "Interceptor;"};

$$._CSSValue = {"": "Interceptor;"};

$$._ClientRect = {"": "Interceptor;height=,left=,right=,top=,width=",
  toString$0: function(receiver) {
    return "(" + $.S(receiver.left) + ", " + $.S(receiver.top) + ", " + $.S(receiver.width) + ", " + $.S(receiver.height) + ")";
  },
  $eq: function(receiver, other) {
    var t1, t2, t3;
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isRect)
      return false;
    t1 = receiver.left;
    t2 = $.getInterceptor$x(other);
    t3 = t2.get$left(other);
    if (t1 == null ? t3 == null : t1 === t3) {
      t1 = receiver.top;
      t3 = t2.get$top(other);
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = receiver.width;
        t3 = t2.get$width(other);
        if (t1 == null ? t3 == null : t1 === t3) {
          t1 = receiver.height;
          t2 = t2.get$height(other);
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  $isRect: true,
  $asRect: null
};

$$._ClientRectList = {"": "Interceptor_ListMixin_ImmutableListMixin9;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Rect]; },
  $isIterable: true,
  $asIterable: function() { return [$.Rect]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssRuleList = {"": "Interceptor_ListMixin_ImmutableListMixin10;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.CssRule]; },
  $isIterable: true,
  $asIterable: function() { return [$.CssRule]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._CssValueList = {"": "_CSSValue_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$._CSSValue]; },
  $isIterable: true,
  $asIterable: function() { return [$._CSSValue]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._DomPoint = {"": "Interceptor;"};

$$._EntryArray = {"": "Interceptor_ListMixin_ImmutableListMixin11;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntryArraySync = {"": "Interceptor_ListMixin_ImmutableListMixin12;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$._EntrySync]; },
  $isIterable: true,
  $asIterable: function() { return [$._EntrySync]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._EntrySync = {"": "Interceptor;"};

$$._GamepadList = {"": "Interceptor_ListMixin_ImmutableListMixin13;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Gamepad]; },
  $isIterable: true,
  $asIterable: function() { return [$.Gamepad]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {"": "Interceptor_ListMixin_ImmutableListMixin14;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechInputResultList = {"": "Interceptor_ListMixin_ImmutableListMixin15;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechInputResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechInputResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._SpeechRecognitionResultList = {"": "Interceptor_ListMixin_ImmutableListMixin16;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.SpeechRecognitionResult]; },
  $isIterable: true,
  $asIterable: function() { return [$.SpeechRecognitionResult]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._StyleSheetList = {"": "Interceptor_ListMixin_ImmutableListMixin17;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.StyleSheet]; },
  $isIterable: true,
  $asIterable: function() { return [$.StyleSheet]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Cursor = {"": "Interceptor;key=",
  next$1: function(receiver, key) {
    return receiver.continue(key);
  },
  get$next: function(receiver) {
    return new $.Bound_next_Cursor(this, "next$1", receiver);
  }
};

$$.CursorWithValue = {"": "Cursor;",
  get$value: function(receiver) {
    return $._convertNativeToDart_IDBAny(receiver.value);
  }
};

$$.Database = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.IdbFactory = {"": "Interceptor;"};

$$.Index = {"": "Interceptor;"};

$$.KeyRange = {"": "Interceptor;"};

$$.ObjectStore = {"": "Interceptor;",
  add$2: function(receiver, value, key) {
    var request, e, stacktrace, t1, exception;
    try {
      request = null;
      if (key != null)
        request = this.$$dom_add$2(receiver, value, key);
      else
        request = this.$$dom_add$1(receiver, value);
      t1 = $._completeRequest(request);
      return t1;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      stacktrace = $._StackTrace$(exception.stack);
      return $._FutureImpl$immediateError(e, stacktrace, null);
    }

  },
  add$1: function($receiver, value) {
    return this.add$2($receiver, value, null);
  },
  $$dom_add$2: function(receiver, value, key) {
    var t1 = $ === key;
    if (t1)
      key = null;
    if (!t1)
      return receiver.add($._convertDartToNative_PrepareForStructuredClone(value), $._convertDartToNative_PrepareForStructuredClone(key));
    return receiver.add($._convertDartToNative_PrepareForStructuredClone(value));
  },
  $$dom_add$1: function($receiver, value) {
    return this.$$dom_add$2($receiver, value, $);
  }
};

$$.OpenDBRequest = {"": "Request;"};

$$.Request = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.Transaction = {"": "EventTarget;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.Angle = {"": "Interceptor;value%"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedAngle = {"": "Interceptor;"};

$$.AnimatedBoolean = {"": "Interceptor;"};

$$.AnimatedEnumeration = {"": "Interceptor;"};

$$.AnimatedInteger = {"": "Interceptor;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedPreserveAspectRatio = {"": "Interceptor;"};

$$.AnimatedRect = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimatedTransformList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;"};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.ElementInstance = {"": "EventTarget;parentNode=",
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;"};

$$.FEColorMatrixElement = {"": "StyledElement;type=,values="};

$$.FEComponentTransferElement = {"": "StyledElement;"};

$$.FECompositeElement = {"": "StyledElement;"};

$$.FEConvolveMatrixElement = {"": "StyledElement;"};

$$.FEDiffuseLightingElement = {"": "StyledElement;"};

$$.FEDisplacementMapElement = {"": "StyledElement;"};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;"};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;"};

$$.FEImageElement = {"": "StyledElement;"};

$$.FEMergeElement = {"": "StyledElement;"};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;"};

$$.FEOffsetElement = {"": "StyledElement;"};

$$.FEPointLightElement = {"": "SvgElement;"};

$$.FESpecularLightingElement = {"": "StyledElement;"};

$$.FESpotLightElement = {"": "SvgElement;"};

$$.FETileElement = {"": "StyledElement;"};

$$.FETurbulenceElement = {"": "StyledElement;type="};

$$.FilterElement = {"": "StyledElement;"};

$$.ForeignObjectElement = {"": "StyledElement;"};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;"};

$$.Length = {"": "Interceptor;value%"};

$$.LengthList = {"": "Interceptor_ListMixin_ImmutableListMixin18;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Length]; },
  $isIterable: true,
  $asIterable: function() { return [$.Length]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_GradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;"};

$$.Matrix = {"": "Interceptor;"};

$$.MetadataElement = {"": "SvgElement;"};

$$.Number = {"": "Interceptor;value%"};

$$.NumberList = {"": "Interceptor_ListMixin_ImmutableListMixin19;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Number]; },
  $isIterable: true,
  $asIterable: function() { return [$.Number]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathElement = {"": "StyledElement;"};

$$.PathSeg = {"": "Interceptor;"};

$$.PathSegArcAbs = {"": "PathSeg;"};

$$.PathSegArcRel = {"": "PathSeg;"};

$$.PathSegClosePath = {"": "PathSeg;"};

$$.PathSegCurvetoCubicAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicRel = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoCubicSmoothRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticRel = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothAbs = {"": "PathSeg;"};

$$.PathSegCurvetoQuadraticSmoothRel = {"": "PathSeg;"};

$$.PathSegLinetoAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalAbs = {"": "PathSeg;"};

$$.PathSegLinetoHorizontalRel = {"": "PathSeg;"};

$$.PathSegLinetoRel = {"": "PathSeg;"};

$$.PathSegLinetoVerticalAbs = {"": "PathSeg;"};

$$.PathSegLinetoVerticalRel = {"": "PathSeg;"};

$$.PathSegList = {"": "Interceptor_ListMixin_ImmutableListMixin20;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.PathSeg]; },
  $isIterable: true,
  $asIterable: function() { return [$.PathSeg]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.PathSegMovetoAbs = {"": "PathSeg;"};

$$.PathSegMovetoRel = {"": "PathSeg;"};

$$.PatternElement = {"": "StyledElement;"};

$$.Point = {"": "Interceptor;"};

$$.PointList = {"": "Interceptor;"};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.PreserveAspectRatio = {"": "Interceptor;"};

$$.RadialGradientElement = {"": "_GradientElement;"};

$$.Rect0 = {"": "Interceptor;"};

$$.RectElement = {"": "StyledElement;"};

$$.RenderingIntent = {"": "Interceptor;"};

$$.ScriptElement0 = {"": "SvgElement;type%"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StringList = {"": "Interceptor_ListMixin_ImmutableListMixin21;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.JSString]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.StyleElement0 = {"": "SvgElement;type%",
  set$title: function(receiver, value) {
    receiver.title = value;
  }
};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver, null);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  insertAdjacentHtml$2: function(receiver, where, text) {
    throw $.wrapException($.UnsupportedError$("Cannot invoke insertAdjacentHtml on SVG."));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, value) {
    receiver.id = value;
  }
};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;"};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;"};

$$.TitleElement0 = {"": "StyledElement;"};

$$.Transform = {"": "Interceptor;type="};

$$.TransformList = {"": "Interceptor_ListMixin_ImmutableListMixin22;",
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.getItem(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$length: function(receiver) {
    return receiver.numberOfItems;
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null,
  $isList: true,
  $asList: function() { return [$.Transform]; },
  $isIterable: true,
  $asIterable: function() { return [$.Transform]; }
};

$$.UnitTypes = {"": "Interceptor;"};

$$.UseElement = {"": "StyledElement;"};

$$.ViewElement = {"": "SvgElement;"};

$$.ViewSpec = {"": "Interceptor;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._ElementInstanceList = {"": "Interceptor_ListMixin_ImmutableListMixin23;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return receiver.item(index);
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.ElementInstance]; },
  $isIterable: true,
  $asIterable: function() { return [$.ElementInstance]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._GradientElement = {"": "StyledElement;"};

$$._SVGColor = {"": "Interceptor;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$.ByteBuffer = {"": "Interceptor;", $isByteBuffer: true, $asByteBuffer: null};

$$.TypedData = {"": "Interceptor;", $isTypedData: true, $asTypedData: null};

$$.ByteData = {"": "TypedData;"};

$$.Float32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {"": "Uint8List;",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {"": "TypedData;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1) === true) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) === true || t2.$ge(index, t1) === true)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(receiver, object) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  get$remove: function(receiver) {
    return new $.BoundClosure$i1(this, "remove$1", receiver);
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $._Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AnalyserNode = {"": "AudioNode;"};

$$.AudioBuffer = {"": "Interceptor;length="};

$$.AudioBufferSourceNode = {"": "AudioSourceNode;"};

$$.AudioContext = {"": "EventTarget;"};

$$.AudioDestinationNode = {"": "AudioNode;"};

$$.AudioListener = {"": "Interceptor;"};

$$.AudioNode = {"": "Interceptor;"};

$$.AudioParam = {"": "Interceptor;value%"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.AudioSourceNode = {"": "AudioNode;"};

$$.BiquadFilterNode = {"": "AudioNode;type%"};

$$.ChannelMergerNode = {"": "AudioNode;"};

$$.ChannelSplitterNode = {"": "AudioNode;"};

$$.ConvolverNode = {"": "AudioNode;"};

$$.DelayNode = {"": "AudioNode;"};

$$.DynamicsCompressorNode = {"": "AudioNode;"};

$$.GainNode = {"": "AudioNode;"};

$$.MediaElementAudioSourceNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioDestinationNode = {"": "AudioSourceNode;"};

$$.MediaStreamAudioSourceNode = {"": "AudioSourceNode;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.OfflineAudioContext = {"": "AudioContext;"};

$$.OscillatorNode = {"": "AudioSourceNode;type%"};

$$.PannerNode = {"": "AudioNode;"};

$$.ScriptProcessorNode = {"": "AudioNode;"};

$$.WaveShaperNode = {"": "AudioNode;"};

$$.WaveTable = {"": "Interceptor;"};

$$.ActiveInfo = {"": "Interceptor;type="};

$$.Buffer = {"": "Interceptor;"};

$$.CompressedTextureAtc = {"": "Interceptor;"};

$$.CompressedTexturePvrtc = {"": "Interceptor;"};

$$.CompressedTextureS3TC = {"": "Interceptor;"};

$$.ContextAttributes = {"": "Interceptor;"};

$$.ContextEvent = {"": "Event;"};

$$.DebugRendererInfo = {"": "Interceptor;"};

$$.DebugShaders = {"": "Interceptor;"};

$$.DepthTexture = {"": "Interceptor;"};

$$.ExtDrawBuffers = {"": "Interceptor;"};

$$.ExtTextureFilterAnisotropic = {"": "Interceptor;"};

$$.Framebuffer = {"": "Interceptor;"};

$$.LoseContext = {"": "Interceptor;"};

$$.OesElementIndexUint = {"": "Interceptor;"};

$$.OesStandardDerivatives = {"": "Interceptor;"};

$$.OesTextureFloat = {"": "Interceptor;"};

$$.OesTextureHalfFloat = {"": "Interceptor;"};

$$.OesVertexArrayObject = {"": "Interceptor;"};

$$.Program = {"": "Interceptor;"};

$$.Renderbuffer = {"": "Interceptor;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.Shader = {"": "Interceptor;"};

$$.ShaderPrecisionFormat = {"": "Interceptor;"};

$$.Texture = {"": "Interceptor;"};

$$.UniformLocation = {"": "Interceptor;"};

$$.VertexArrayObject = {"": "Interceptor;"};

$$.SqlDatabase = {"": "Interceptor;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

$$.SqlResultSet = {"": "Interceptor;rows="};

$$.SqlResultSetRowList = {"": "Interceptor_ListMixin_ImmutableListMixin24;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw $.wrapException($.RangeError$range(index, 0, t1));
    return $.convertNativeToDart_Dictionary(receiver.item(index));
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  set$length: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot resize immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  $isList: true,
  $asList: function() { return [$.Map]; },
  $isIterable: true,
  $asIterable: function() { return [$.Map]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.SqlTransaction = {"": "Interceptor;"};

// Bound closures
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.Bound_next_Cursor = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  },
  call$0: function() {
    return this.call$1(null);
  }
};

$$.Closure$_processWorkerMessage = {"": "Closure;call$2,$name"};

$$.Closure$wrapException = {"": "Closure;call$1,$name"};

$$.Closure$toStringWrapper = {"": "Closure;call$0,$name"};

$$.Closure$invokeClosure = {"": "Closure;call$5,$name"};

$$.Closure$typeNameInChrome = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInSafari = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInOpera = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInFirefox = {"": "Closure;call$1,$name"};

$$.Closure$typeNameInIE = {"": "Closure;call$1,$name"};

$$.Closure$constructorNameFallback = {"": "Closure;call$1,$name"};

$$.Closure$_asyncRunCallback = {"": "Closure;call$0,$name"};

$$.Closure$_nullDataHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullErrorHandler = {"": "Closure;call$1,$name"};

$$.Closure$_nullDoneHandler = {"": "Closure;call$0,$name"};

$$.Closure$compare = {"": "Closure;call$2,$name"};

$$.Closure$main = {"": "Closure;call$0,$name"};

$$.Closure$_doNothing = {"": "Closure;call$0,$name"};

$$.Closure$defaultObserveUnhandledError = {"": "Closure;call$4,$name"};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart) === true; i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.SkipIterator$ = function(_iterator, _skipCount) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  t1.SkipIterator$2(_iterator, _skipCount);
  return t1;
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true || t1.$gt(start, list.length) === true)
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true || t1.$gt(end, list.length) === true)
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if ($.$lt$n(skipCount, 0) === true)
    throw $.wrapException($.ArgumentError$(skipCount));
  otherStart = skipCount;
  otherList = from;
  if ($.$gt$n($.$add$ns(otherStart, $length), $.get$length$asx(otherList)) === true)
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.Symbol$unvalidated = function(_name) {
  return new $.Symbol0(_name);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, t3, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(e, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  $.forEach$1$ax(m, new $.ToString__emitPair_closure(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key))
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys) {
  return new $.HashMapKeyIterator(_map, _keys, 0, null);
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key))
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications);
  return t1;
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$._symbolMapToStringMap = function(map) {
  var result;
  if (map == null)
    return;
  result = $.HashMap$($.JSString, null);
  map.forEach$1(map, new $._symbolMapToStringMap_closure(result));
  return result;
};

$._symbolMapToStringMap0 = function(map) {
  var result;
  if (map == null)
    return;
  result = $.HashMap$($.JSString, null);
  map.forEach$1(map, new $._symbolMapToStringMap_closure0(result));
  return result;
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  Object.defineProperty(object, $.dispatchPropertyName, {value: value, enumerable: false, writable: true, configurable: true});
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchProperty = function(setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  if (typeof rootProperty !== "string")
    return $.initializeDispatchProperty$bailout(1, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor);
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    if (i > 0)
      property = rootProperty + "_" + i;
    else
      property = rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.initializeDispatchProperty$bailout = function(state0, setGetDispatchPropertyFn, rootProperty, jsObjectInterceptor) {
  var objectProto, i, property;
  objectProto = Object.prototype;
  for (i = 0; true; ++i) {
    property = i > 0 ? rootProperty + "_" + i : rootProperty;
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      setGetDispatchPropertyFn(new Function("a", "return a." + property));
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$.startRootIsolate = function(entry) {
  var rootContext;
  $globalState = $._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._Manager$ = function(entry) {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, functionName, entryPoint, replyTo, context, t2, values;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : $[functionName];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_closure(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      values = $.Primitives_getProperty(sender, "expando$values");
      t1.remove$1(t1, values == null ? null : $.Primitives_getProperty(values, t2._getKey$0()));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $._StackTrace$(exception.stack);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { $.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.JSArray).then$1(new $._waitForPendingPorts_closure(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.createInvocationMirror = function($name, internalName, type, $arguments, argumentNames) {
  return $.JSInvocationMirror$($.Symbol$unvalidated($name), internalName, type, $arguments, argumentNames);
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  return new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = $.JSArray_methods.get$iterator(codePoints); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException($.ArgumentError$(i));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, i;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i < 0)
      throw $.wrapException($.ArgumentError$(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper = $.DartError$(ex == null ? $.C_NullThrownError : ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException$closure);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") || t1.$eq(type, "called_non_callable") || t1.$eq(type, "non_object_property_call") || t1.$eq(type, "non_object_property_load");
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method"))
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    return $._ExceptionImplementation$(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1, result;
  t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0)) {
    result = isolate.eval$1(new $.invokeClosure_closure(closure));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 1)) {
    result = isolate.eval$1(new $.invokeClosure_closure0(closure, arg1));
    $globalState.topEventLoop.run$0();
    return result;
  } else if (t1.$eq(numberOfArguments, 2)) {
    result = isolate.eval$1(new $.invokeClosure_closure1(closure, arg1, arg2));
    $globalState.topEventLoop.run$0();
    return result;
  } else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($globalState.currentContext, $.invokeClosure$closure.call$5);
  closure.$identity = $function;
  return $function;
};

$.listSuperNativeTypeCast = function(value, property) {
  var t1;
  if (typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isList) || value == null)
    return value;
  if ($.getInterceptor(value)[property])
    return value;
  t1 = $.getInterceptor$asx(property);
  $.throwExpression($.CastErrorImplementation$($.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + $.S(expectedType));
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t, len, t1) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      t1 = $.getInterceptor(s);
      if (s == null || t == null)
        return true;
      len = t1.get$length(s);
    case 2:
      var t2, i;
      state0 = 0;
      for (t2 = $.getInterceptor$asx(t), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
        if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
          return false;
      return true;
  }
};

$.checkSubtypeOfRuntimeType = function(o, t) {
  var rti, type;
  if (o == null || t == null)
    return true;
  rti = $.getRuntimeTypeInfo(o);
  o = typeof o == "function" ? o : $.getInterceptor(o);
  if (rti != null) {
    type = rti.slice();
    type.splice(0, 0, o);
  } else
    type = o;
  return $.isSubtype(type, t);
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, substitution, $arguments;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(3, s, t, true, true, typeOfS, t1);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (s.func || t.func)
    return true;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(s.constructor === Array) && substitution == null))
    t1 = !(t.constructor === Array);
  else
    t1 = true;
  if (t1)
    return true;
  $arguments = s.constructor === Array ? s.slice(1) : null;
  t1 = t.constructor === Array ? t.slice(1) : null;
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, t1);
};

$.isSubtype$bailout = function(state0, s, t, t1, t2, typeOfS, t3) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (s == null || t == null)
        return true;
      if (s === t)
        return true;
      t1 = s != null;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.$index$asx(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = t != null;
    case 3:
      var typeOfT, substitution, $arguments;
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.$index$asx(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (s.func || t.func)
        return true;
      if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
        return false;
      substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
      if (!(!(t1 && s.constructor === Array) && substitution == null))
        t3 = !(t2 && t.constructor === Array);
      else
        t3 = true;
      if (t3)
        return true;
      $arguments = t1 && s.constructor === Array ? s.slice(1) : null;
      t1 = t2 && t.constructor === Array ? t.slice(1) : null;
      if (substitution != null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = substitution.apply(null, $arguments);
      return $.areSubtypes($arguments, t1);
  }
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_closure() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome$closure;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome$closure;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox$closure;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE$closure;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera$closure;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari$closure;
  else
    return $.constructorNameFallback$closure;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; $.get$_asyncCallbacks().length !== 0;) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback$closure);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._AsyncCompleter$ = function(T) {
  var t1 = new $._AsyncCompleter($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SyncCompleter$ = function(T) {
  var t1 = new $._SyncCompleter($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediateError$2(error, stackTrace, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_closure(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0))
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._AsyncCompleter$($.JSArray);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._throwDelayed = function(error, stackTrace) {
  $.get$_asyncCallbacks().push(new $._throwDelayed_closure(error, stackTrace));
  if (!$._callbacksAreEnqueued) {
    $.Timer_run($._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._runUserCode = function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $._StackTrace$(exception.stack);
    onError.call$1($._asyncError(e, s));
  }

};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_closure(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError);
  return t1;
};

$._WhereStream$ = function(source, test, T) {
  var t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.Timer_run = function(callback) {
  var milliseconds;
  $.get$Timer__runCallbacks().push(callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    milliseconds = $.JSNumber_methods.$tdiv($.Duration_0._duration, 1000);
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, new $.Timer_run_closure());
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$sub$n($.$shl$n(number, 2), 1);
  if (typeof number !== "number")
    return $.ListQueue__nextPowerOf2$bailout(1, number);
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$.ListQueue__nextPowerOf2$bailout = function(state0, number) {
  var t1, nextNumber;
  for (; true; number = nextNumber) {
    t1 = $.getInterceptor$n(number);
    nextNumber = t1.$and(number, t1.$sub(number, 1));
    if ($.$eq(nextNumber, 0))
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$._SplayTreeNode$ = function(key) {
  return new $._SplayTreeNode(key, null, null);
};

$._SplayTreeMapNode$ = function(key, value) {
  return new $._SplayTreeMapNode(value, key, null, null);
};

$.SplayTreeMap$ = function(compare, K, V) {
  var t1 = compare == null ? $.Comparable_compare$closure : compare;
  t1 = new $.SplayTreeMap(t1, null, $._SplayTreeNode$(null), 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterable$ = function(_tree, K) {
  var t1 = new $._SplayTreeKeyIterable(_tree);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._SplayTreeValueIterable$ = function(_map, K, V) {
  var t1 = new $._SplayTreeValueIterable(_map);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$._SplayTreeKeyIterator$ = function(map) {
  var t1 = new $._SplayTreeKeyIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeValueIterator$ = function(map) {
  var t1 = new $._SplayTreeValueIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$._SplayTreeNodeIterator$ = function(map) {
  var t1 = new $._SplayTreeNodeIterator(map, [], map._modificationCount, map._splayCount, null);
  t1._SplayTreeIterator$1(map);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string") {
    t1 = $.JSString_methods.replaceAll$2(object, "\\", "\\\\");
    t1 = $.stringReplaceAllUnchecked(t1, "\n", "\\n");
    t1 = $.stringReplaceAllUnchecked(t1, "\r", "\\r");
    return "\"" + $.stringReplaceAllUnchecked(t1, "\"", "\\\"") + "\"";
  }
  return "Instance of '" + $.Primitives_objectTypeName(object) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Expando$ = function($name) {
  return new $.Expando($name);
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  list.$builtinTypeInfo = [E];
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  fixedList.$builtinTypeInfo = [E];
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.ButtonElement_ButtonElement = function() {
  return document.createElement("button");
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, parentTag, temp, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    match.group$1;
    t1 = match._groups;
    if (1 >= t1.length)
      throw $.ioore(1);
    tag = $.toLowerCase$0$s(t1[1]);
    if ($.Device__isIE == null)
      $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0) === true;
    if ($.Device__isIE === true && $.Map_Ai46y.containsKey$1($.Map_Ai46y, tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.Map_8h6qb.$index($.Map_8h6qb, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = document.createElement(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1))
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") && $.$eq($.get$length$asx(t1.get$children(temp)), 2)) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, $.$eq(tag, "head") ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, t1, table, element;
  div = document.createElement("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + html + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  return $._ElementFactoryProvider__singleNode($.toList$0$ax($.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_closure())));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1))
    return t1.$index(list, 0);
  throw $.wrapException($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " top level elements but 1 expected"));
};

$.HttpRequest_getString = function(url, onProgress, withCredentials) {
  return $.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new $.HttpRequest_getString_closure());
};

$.HttpRequest_request = function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
  var completer, xhr, t1;
  completer = $._AsyncCompleter$($.HttpRequest);
  xhr = new XMLHttpRequest();
  $.open$3$async$x(xhr, method == null ? "GET" : method, url, true);
  if (withCredentials != null)
    xhr.withCredentials = withCredentials;
  if (responseType != null)
    xhr.responseType = responseType;
  if (mimeType != null)
    xhr.overrideMimeType(mimeType);
  if (requestHeaders != null)
    $.JSNull_methods.forEach$1(requestHeaders, new $.HttpRequest_request_closure(xhr));
  if (onProgress != null) {
    t1 = $.EventStreamProvider_progress.forTarget$1(xhr);
    $._EventStreamSubscription$(t1._target, t1._eventType, onProgress, t1._useCapture);
  }
  t1 = $.EventStreamProvider_load.forTarget$1(xhr);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.HttpRequest_request_closure0(completer, xhr), t1._useCapture);
  t1 = $.EventStreamProvider_error.forTarget$1(xhr);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.HttpRequest_request_closure1(completer), t1._useCapture);
  if (sendData != null)
    xhr.send(sendData);
  else
    xhr.send();
  return completer.future;
};

$.InputElement_InputElement = function(type) {
  var e, exception;
  e = document.createElement("input");
  if (type != null)
    try {
      $.set$type$x(e, type);
    } catch (exception) {
      $.unwrapException(exception);
    }

  return e;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.OptionElement_OptionElement = function(data, value, defaultSelected, selected) {
  var t1, t2, t3, t4;
  t1 = $ === data;
  if (t1)
    data = null;
  t2 = $ === value;
  if (t2)
    value = null;
  t3 = $ === defaultSelected;
  if (t3)
    defaultSelected = null;
  t4 = $ === selected;
  if (t4)
    selected = null;
  if (!t4)
    return new Option(data, value, defaultSelected, selected);
  if (!t3)
    return new Option(data, value, defaultSelected);
  if (!t2)
    return new Option(data, value);
  if (!t1)
    return new Option(data);
  return new Option();
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator) {
  return new $._WrappedIterator(_iterator);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
};

$.convertNativeToDart_Dictionary = function(object) {
  var dict, t1, key;
  if (object == null)
    return;
  dict = $.makeLiteralMap([]);
  for (t1 = $.JSArray_methods.get$iterator(Object.getOwnPropertyNames(object)); t1.moveNext$0();) {
    key = t1.get$current();
    dict.$indexSet(dict, key, object[key]);
  }
  return dict;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  dict.forEach$1(dict, new $.convertDartToNative_Dictionary_closure(object));
  return object;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, copy;
  copies = [];
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
  new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Device_userAgent = function() {
  return $.window().navigator.userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.FilteredElementList$ = function(node, T) {
  var t1 = new $.FilteredElementList(node, $.get$nodes$x(node));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, false);
};

$._completeRequest = function(request) {
  var completer, t1;
  completer = $._SyncCompleter$(null);
  request.get$onSuccess;
  t1 = $.EventStreamProvider_success.forTarget$1(request);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $._completeRequest_closure(request, completer), t1._useCapture);
  request.get$onError;
  t1 = $.EventStreamProvider_error.forTarget$1(request);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $._completeRequest_closure0(completer), t1._useCapture);
  return completer.future;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JsonCyclicError$ = function(object) {
  return new $.JsonCyclicError(object, null);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2, t3, str;
  t1 = $.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($, $.JSInt);
  charCodes.$builtinTypeInfo = [$.JSInt];
  for (needsEscape = false, i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    t2 = $.getInterceptor$n(charCode);
    if (t2.$lt(charCode, 32) === true) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t3 = $.$and$n(t2.$shr(charCode, 12), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 8), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t3 = $.$and$n(t2.$shr(charCode, 4), 15);
          if ($.$lt$n(t3, 10) === true) {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 48 + t3;
          } else {
            if (typeof t3 !== "number")
              throw $.iae(t3);
            t3 = 87 + t3;
          }
          charCodes.push(t3);
          t2 = t2.$and(charCode, 15);
          if ($.$lt$n(t2, 10) === true) {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 48 + t2;
          } else {
            if (typeof t2 !== "number")
              throw $.iae(t2);
            t2 = 87 + t2;
          }
          charCodes.push(t2);
          break;
      }
      needsEscape = true;
    } else if (t2.$eq(charCode, 34) || t2.$eq(charCode, 92)) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  if (needsEscape) {
    t1 = $.Primitives_stringFromCharCodes(!(charCodes.constructor === Array) ? $.List_List$from(charCodes, true, null) : charCodes);
    str = t1;
  } else
    str = s;
  str = typeof str === "string" ? str : $.S(str);
  sb._contents = sb._contents + str;
};

$._Lists_getRange = function(a, start, end, accumulator) {
  var t1, i;
  if (typeof start !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $._Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  t1 = $.getInterceptor$asx(a);
  if ($.JSNumber_methods.$gt(end, t1.get$length(a)))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i)
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$._Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.wrapException($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.loadDataContainerOnFirstLoad = function() {
  document.querySelector("#data_container");
  $.HttpRequest_getString($.JSString_methods.$add($.baseURL, "getContactsGroupList"), null, null).then$1(new $.loadDataContainerOnFirstLoad_closure());
};

$.renderControlsPanelOnFirstLoad = function() {
  $.set$text$x($.get$addContactBtn(), "+");
  $.set$title$x($.get$addContactBtn(), "Add Contact");
  $.set$id$x($.get$addContactBtn(), "add_contact_btn");
  $.get$onClick$x($.get$addContactBtn()).listen$1(new $.renderControlsPanelOnFirstLoad_closure());
  document.querySelector("#control_panel").appendChild($.get$addContactBtn());
  $.set$text$x($.get$addGroupBtn(), "\u229e");
  $.set$title$x($.get$addGroupBtn(), "Add Group");
  $.set$id$x($.get$addGroupBtn(), "add_contacts_group");
  $.get$onClick$x($.get$addGroupBtn()).listen$1(new $.renderControlsPanelOnFirstLoad_closure0());
  document.querySelector("#control_panel").appendChild($.get$addGroupBtn());
};

$.closeGeneralDialog = function() {
  $.set$display$x(document.querySelector("#overlay_shield").style, "none");
  $.set$display$x(document.querySelector("#general_dialog").style, "none");
  $.set$innerHtml$x(document.querySelector("#general_dialog_header_content"), "");
  $.set$innerHtml$x(document.querySelector("#general_dialog_body"), "");
  $.set$innerHtml$x(document.querySelector("#general_dialog_footer"), "");
};

$.populateGeneralDialogForAddContact = function() {
  var bodySection, groupSelection, t1, nameCommentDiv, namefield, t2, contactCommentsTextArea, phonesDiv, phonesFieldSet, phonesFiledSetLegend, addCellPhoneBtn, addLandLineBtn, dialogFooter, addContactSaveBtn;
  $.appendHtml$1$x(document.querySelector("#general_dialog_header_content"), "<h1>ADD CONTACT</h1>");
  bodySection = document.querySelector("#general_dialog_body");
  groupSelection = document.createElement("select");
  t1 = $.getInterceptor$x(groupSelection);
  t1.set$id(groupSelection, "add_contact_group_selection");
  t1 = t1.get$children(groupSelection);
  t1.add$1(t1, $.OptionElement_OptionElement("uncategorized", "uncategorized", true, true));
  $.appendHtml$1$x(bodySection, "<label for='add_contact_group_selection'>Group: </label>");
  bodySection.appendChild(groupSelection);
  nameCommentDiv = document.createElement("div");
  t1 = $.getInterceptor$x(nameCommentDiv);
  t1.set$id(nameCommentDiv, "name_comment_div");
  namefield = $.InputElement_InputElement("text");
  t2 = $.getInterceptor$x(namefield);
  t2.set$id(namefield, "contact_name");
  t2.set$placeholder(namefield, "");
  t1.appendHtml$1(nameCommentDiv, "<label for='contact_name'>Name: </label>");
  nameCommentDiv.appendChild(namefield);
  contactCommentsTextArea = document.createElement("textarea");
  t2 = $.getInterceptor$x(contactCommentsTextArea);
  t2.set$id(contactCommentsTextArea, "contact_comments");
  t2.set$placeholder(contactCommentsTextArea, "");
  t1.appendHtml$1(nameCommentDiv, "<label for='contact_comments'>Your Comments: </label>");
  nameCommentDiv.appendChild(contactCommentsTextArea);
  phonesDiv = document.createElement("div");
  $.set$id$x(phonesDiv, "phones_div");
  phonesFieldSet = document.createElement("fieldset");
  phonesFiledSetLegend = document.createElement("legend");
  addCellPhoneBtn = document.createElement("button");
  t1 = $.getInterceptor$x(addCellPhoneBtn);
  t1.set$id(addCellPhoneBtn, "add_cell_phone_btn");
  addCellPhoneBtn.textContent = "\ud83d\udcf6";
  t1.set$title(addCellPhoneBtn, "Add cell phone");
  t1.get$onClick(addCellPhoneBtn).listen$1(new $.populateGeneralDialogForAddContact_closure());
  addLandLineBtn = document.createElement("button");
  t1 = $.getInterceptor$x(addLandLineBtn);
  t1.set$id(addLandLineBtn, "add_land_line_btn");
  addLandLineBtn.textContent = "\u260e";
  t1.set$title(addLandLineBtn, "Add land line");
  t1.get$onClick(addLandLineBtn).listen$1(new $.populateGeneralDialogForAddContact_closure0());
  phonesFiledSetLegend.appendChild(addCellPhoneBtn);
  phonesFiledSetLegend.appendChild(addLandLineBtn);
  t1 = $.getInterceptor$x(phonesFieldSet);
  phonesFieldSet.appendChild(phonesFiledSetLegend);
  t1.appendHtml$1(phonesFieldSet, "<ul id='cell_phones_list'></ul>");
  t1.appendHtml$1(phonesFieldSet, "</br><ul id='land_lines_list'></ul>");
  phonesDiv.appendChild(phonesFieldSet);
  bodySection.appendChild(nameCommentDiv);
  bodySection.appendChild(phonesDiv);
  dialogFooter = document.querySelector("#general_dialog_footer");
  addContactSaveBtn = document.createElement("button");
  t1 = $.getInterceptor$x(addContactSaveBtn);
  t1.set$id(addContactSaveBtn, "add_contact_save_btn");
  addContactSaveBtn.textContent = "Save";
  t1.get$onClick(addContactSaveBtn).listen$1(new $.populateGeneralDialogForAddContact_closure1());
  dialogFooter.appendChild(addContactSaveBtn);
};

$.init_autogenerated = function() {
  var __root, __html0, __t, t1, t2;
  __root = document.body;
  __html0 = $._ElementFactoryProvider_createElement_html("<div>keys</div>");
  __t = $.Template$(__root);
  t1 = $.getInterceptor$x(__root);
  t2 = t1.get$nodes(__root);
  __t.children.push($.LoopTemplate$($.$index$asx($.get$nodes$x(t2.$index(t2, 5)), 3), new $.init_autogenerated_closure(), new $.init_autogenerated_closure0(__html0)));
  t1 = t1.get$nodes(__root);
  __t.listen$2($.get$onClick$x($.$index$asx($.get$nodes$x($.$index$asx($.get$nodes$x(t1.$index(t1, 9)), 1)), 3)), new $.init_autogenerated_closure1());
  __t.create$0();
  __t.insert$0(__t);
};

$.main = function() {
  $.useObservers = false;
  $.appendHtml$1$x(document.querySelector("#application_header"), "<h1>Contacts Book</h1>");
  $.renderControlsPanelOnFirstLoad();
  $.loadDataContainerOnFirstLoad();
  $.init_autogenerated();
};

$.JsonObject$ = function(E) {
  var t1 = new $.JsonObject(null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.JsonObject$0(E);
  return t1;
};

$.JsonObjectException$ = function(message) {
  return new $.JsonObjectException(message);
};

$.ChangeNotification$ = function(oldValue, newValue, changes) {
  return new $.ChangeNotification(oldValue, newValue, changes);
};

$.observe = function(value, callback, debugName) {
  var exprObserver = $._ExpressionObserver$(value, callback, debugName);
  if (!exprObserver._observe$0(exprObserver))
    return $._doNothing$closure;
  return exprObserver.get$_unobserve();
};

$._doNothing = function() {
};

$._ExpressionObserver$ = function(_expression, _callback, _debugName) {
  var t1 = $.$add$ns($._ExpressionObserver__nextId, 1);
  $._ExpressionObserver__nextId = t1;
  return new $._ExpressionObserver(t1, _expression, _callback, _debugName, $.Map_Map(null, null), [], false, null);
};

$.defaultObserveUnhandledError = function(error, trace, obj, message) {
  $.Primitives_printString("web_ui.observe: unhandled error calling " + $.S(obj) + " " + $.S(message) + ".\nerror:\n" + $.S(error) + "\n\nstack trace:\n" + $.S(trace));
};

$.LinkedListNode$_ = function(value, _list, E) {
  var t1 = new $.LinkedListNode(null, null, _list, value);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.LinkedListNode$_$2(value, _list, E);
  return t1;
};

$.LinkedList$ = function(E) {
  var t1 = new $.LinkedList(null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedListIterator$ = function(_list) {
  var t1 = new $.LinkedListIterator(null, _list, null, -1);
  t1.LinkedListIterator$1(_list);
  return t1;
};

$.hash3 = function(x, y, z) {
  return $.$add$ns($.$mul$n($.get$hashCode$($.$add$ns($.$mul$n($.get$hashCode$(x), 31), $.get$hashCode$(y))), 31), $.get$hashCode$(z));
};

$.Listener$ = function(eventStream, listener) {
  return new $.Listener(eventStream, null, listener);
};

$.Template$ = function(node) {
  return new $.Template(node, [], []);
};

$.LoopTemplate$ = function(reference, exp, iterSetup) {
  return new $.LoopTemplate(iterSetup, exp, null, reference, [], []);
};

$.watch = function(target, callback, debugName) {
  var exp, watcherType, val, e, trace, t1, exception, watcher, node;
  if ($.useObservers)
    return $.observe(target, callback, null);
  if ($._watchers == null)
    $._watchers = $.LinkedList$($._Watcher);
  exp = null;
  watcherType = $._WatcherType_OTHER;
  t1 = target;
  if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFunction) {
    exp = target;
    try {
      val = target.call$0();
      t1 = val;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList))
        watcherType = $._WatcherType_LIST;
      else {
        t1 = val;
        if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
          watcherType = $._WatcherType_LIST;
          exp = new $.watch_closure(target);
        } else {
          t1 = val;
          if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
            t1 = val;
            t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
          } else
            t1 = true;
          if (t1)
            watcherType = $._WatcherType_ORDERED_MAP;
          else {
            t1 = val;
            if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap)
              watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $._StackTrace$(exception.stack);
      $.Primitives_printString("error: evaluating " + $.S(debugName != null ? debugName : "<unnamed>") + " watcher threw error (" + $.S(e) + ", " + $.S(trace) + ")");
    }

  } else {
    t1 = target;
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isList)) {
      exp = new $.watch_closure0(target);
      watcherType = $._WatcherType_LIST;
    } else {
      t1 = target;
      if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || !!$.getInterceptor(t1).$isIterable)) {
        exp = new $.watch_closure1(target);
        watcherType = $._WatcherType_LIST;
      } else {
        t1 = target;
        if (typeof t1 !== "object" || t1 === null || !$.getInterceptor(t1).$isLinkedHashMap) {
          t1 = target;
          t1 = typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isSplayTreeMap;
        } else
          t1 = true;
        if (t1) {
          exp = new $.watch_closure2(target);
          watcherType = $._WatcherType_ORDERED_MAP;
        } else {
          t1 = target;
          if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isMap) {
            exp = new $.watch_closure3(target);
            watcherType = $._WatcherType_HASH_MAP;
          }
        }
      }
    }
  }
  watcher = $._createWatcher(watcherType, exp, callback, debugName);
  t1 = $._watchers;
  node = t1.add$1(t1, watcher);
  return node.get$remove(node);
};

$._createWatcher = function(type, exp, callback, debugName) {
  switch (type) {
    case $._WatcherType_LIST:
      return $._ListWatcher$(exp, callback, debugName, null);
    case $._WatcherType_ORDERED_MAP:
      return $._OrderDependantMapWatcher$(exp, callback, debugName);
    case $._WatcherType_HASH_MAP:
      return $._HashMapWatcher$(exp, callback, debugName, null, null);
    default:
      return $._Watcher$(exp, callback, debugName);
  }
};

$.watchAndInvoke = function(exp, callback, debugName) {
  var res, value;
  res = $.watch(exp, callback, debugName);
  value = !!$.getInterceptor(exp).$isFunction ? exp.call$0() : exp;
  callback.call$1($.ChangeNotification$(null, typeof value === "object" && value !== null && (value.constructor === Array || !!$.getInterceptor(value).$isIterable) && (typeof value !== "object" || value === null || value.constructor !== Array && !$.getInterceptor(value).$isList) ? $.toList$0$ax(value) : value, null));
  return res;
};

$._Watcher$ = function(_getter, _callback, debugName) {
  var t1 = new $._Watcher(debugName, _getter, _callback, null);
  t1._Watcher$3(_getter, _callback, debugName);
  return t1;
};

$.dispatch = function() {
  var total, t1, dirty;
  if ($._watchers == null)
    return;
  total = 0;
  do {
    for (t1 = $._watchers, t1 = t1.get$iterator(t1), dirty = false; t1.moveNext$0();)
      if (t1.get$current().compareAndNotify$0() === true)
        dirty = true;
    if (dirty) {
      ++total;
      t1 = total < 10;
    } else
      t1 = false;
  } while (t1);
  if (total === 10)
    $.Primitives_printString("Possible loop in watchers propagation, stopped dispatch.");
};

$._ListWatcher$ = function(getter, callback, debugName, T) {
  var t1 = new $._ListWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._Watcher$3(getter, callback, debugName);
  t1._ListWatcher$3(getter, callback, debugName, T);
  return t1;
};

$._HashMapWatcher$ = function(getter, callback, debugName, K, V) {
  var t1 = new $._HashMapWatcher(debugName, getter, callback, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._Watcher$3(getter, callback, debugName);
  t1._HashMapWatcher$3(getter, callback, debugName, K, V);
  return t1;
};

$._OrderDependantMapWatcher$ = function(getter, callback, debugName) {
  var t1 = new $._OrderDependantMapWatcher(debugName, getter, callback, null);
  t1._Watcher$3(getter, callback, debugName);
  t1._OrderDependantMapWatcher$3(getter, callback, debugName);
  return t1;
};

$._iterablesNotEqual = function(first, second) {
  var x, y;
  x = $.get$iterator$ax(first);
  y = $.get$iterator$ax(second);
  for (; x.moveNext$0() === true;) {
    if (y.moveNext$0() !== true)
      return true;
    if (!$.$eq(x.get$current(), y.get$current()))
      return true;
  }
  return y.moveNext$0();
};

$.IsolateNatives__processWorkerMessage$closure = new $.Closure$_processWorkerMessage($.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
$.wrapException$closure = new $.Closure$wrapException($.wrapException, "wrapException$closure");
$.DartError_toStringWrapper$closure = new $.Closure$toStringWrapper($.DartError_toStringWrapper, "DartError_toStringWrapper$closure");
$.invokeClosure$closure = new $.Closure$invokeClosure($.invokeClosure, "invokeClosure$closure");
$.typeNameInChrome$closure = new $.Closure$typeNameInChrome($.typeNameInChrome, "typeNameInChrome$closure");
$.typeNameInSafari$closure = new $.Closure$typeNameInSafari($.typeNameInSafari, "typeNameInSafari$closure");
$.typeNameInOpera$closure = new $.Closure$typeNameInOpera($.typeNameInOpera, "typeNameInOpera$closure");
$.typeNameInFirefox$closure = new $.Closure$typeNameInFirefox($.typeNameInFirefox, "typeNameInFirefox$closure");
$.typeNameInIE$closure = new $.Closure$typeNameInIE($.typeNameInIE, "typeNameInIE$closure");
$.constructorNameFallback$closure = new $.Closure$constructorNameFallback($.constructorNameFallback, "constructorNameFallback$closure");
$._asyncRunCallback$closure = new $.Closure$_asyncRunCallback($._asyncRunCallback, "_asyncRunCallback$closure");
$._nullDataHandler$closure = new $.Closure$_nullDataHandler($._nullDataHandler, "_nullDataHandler$closure");
$._nullErrorHandler$closure = new $.Closure$_nullErrorHandler($._nullErrorHandler, "_nullErrorHandler$closure");
$._nullDoneHandler$closure = new $.Closure$_nullDoneHandler($._nullDoneHandler, "_nullDoneHandler$closure");
$.Comparable_compare$closure = new $.Closure$compare($.Comparable_compare, "Comparable_compare$closure");
$.main$closure = new $.Closure$main($.main, "main$closure");
$._doNothing$closure = new $.Closure$_doNothing($._doNothing, "_doNothing$closure");
$.defaultObserveUnhandledError$closure = new $.Closure$defaultObserveUnhandledError($.defaultObserveUnhandledError, "defaultObserveUnhandledError$closure");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$._WatcherType_LIST = new $._WatcherType("LIST");
$.List_Aia = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.Map_Ai46y = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.List_Aia);
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$._WatcherType_OTHER = new $._WatcherType("OTHER");
$.List_8h5 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.Map_8h6qb = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.List_8h5);
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.NodeList_methods = $.NodeList.prototype;
$.EventStreamProvider_progress = new $.EventStreamProvider("progress");
$.Duration_0 = new $.Duration(0);
$.JSNull_methods = $.JSNull.prototype;
$.C_NullThrownError = new $.NullThrownError();
$._WatcherType_HASH_MAP = new $._WatcherType("HASH_MAP");
$.HttpRequest_methods = $.HttpRequest.prototype;
$.EventStreamProvider_load = new $.EventStreamProvider("load");
$.C_CloseToken = new $.CloseToken();
$._WatcherType_ORDERED_MAP = new $._WatcherType("ORDERED_MAP");
$.JSArray_methods = $.JSArray.prototype;
$.JSInt_methods = $.JSInt.prototype;
$.Float32List_methods = $.Float32List.prototype;
$.EventStreamProvider_success = new $.EventStreamProvider("success");
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Device__isOpera = null;
$.Device__isIE = null;
$.baseURL = "http://localhost:8080/personalportal/ContactsBook?action=";
$.enableJsonObjectDebugMessages = false;
$._activeObserver = null;
$._changedExpressions = null;
$._ExpressionObserver__nextId = 0;
$.onObserveUnhandledError = $.defaultObserveUnhandledError$closure;
$.useObservers = false;
$._watchers = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.appendHtml$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).appendHtml$1(receiver, a0);
};
$.cancel$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).cancel$0(receiver);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$key$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$key(receiver);
};
$.get$keys$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$keys(receiver);
};
$.get$left$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$left(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$newValue$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$newValue(receiver);
};
$.get$next$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$next(receiver);
};
$.get$nextNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nextNode(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$parentNode$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$parentNode(receiver);
};
$.get$remove$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$remove(receiver);
};
$.get$responseText$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$responseText(receiver);
};
$.get$right$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$right(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.get$values$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$values(receiver);
};
$.insert$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).insert$0(receiver);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.open$3$async$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).open$3$async(receiver, a0, a1, a2);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.remove$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$display$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$display(receiver, value);
};
$.set$id$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$id(receiver, value);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$left$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$left(receiver, value);
};
$.set$length$asx = function(receiver, value) {
  return $.getInterceptor$asx(receiver).set$length(receiver, value);
};
$.set$name$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$name(receiver, value);
};
$.set$right$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$right(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$title$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$title(receiver, value);
};
$.set$type$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$type(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.setRange$4$ax = function(receiver, a0, a1, a2, a3) {
  return $.getInterceptor$ax(receiver).setRange$4(receiver, a0, a1, a2, a3);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toList$1$growable$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return $.Expando$(null);
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error");
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "contactsBook", "contactsBook", "get$contactsBook", function() {
  return $.JsonObject$(null);
});
Isolate.$lazy($, "addContactBtn", "addContactBtn", "get$addContactBtn", function() {
  return $.ButtonElement_ButtonElement();
});
Isolate.$lazy($, "addGroupBtn", "addGroupBtn", "get$addGroupBtn", function() {
  return $.ButtonElement_ButtonElement();
});
// Native classes
$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethodsNonleaf("AbstractWorker", $.AbstractWorker);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("ApplicationCache|DOMApplicationCache|OfflineResourceList", $.ApplicationCache);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("BarInfo", $.BarInfo);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("Canvas2DContextAttributes", $.Canvas2DContextAttributes);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("Composition", $.Composition);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("Coordinates", $.Coordinates);

$.defineNativeMethods("Crypto", $.Crypto);

$.defineNativeMethods("CSS", $.Css);

$.defineNativeMethods("CSSCharsetRule", $.CssCharsetRule);

$.defineNativeMethods("WebKitCSSFilterRule", $.CssFilterRule);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSFontFaceRule", $.CssFontFaceRule);

$.defineNativeMethods("CSSHostRule", $.CssHostRule);

$.defineNativeMethods("CSSImportRule", $.CssImportRule);

$.defineNativeMethods("WebKitCSSKeyframeRule", $.CssKeyframeRule);

$.defineNativeMethods("WebKitCSSKeyframesRule", $.CssKeyframesRule);

$.defineNativeMethods("CSSMediaRule", $.CssMediaRule);

$.defineNativeMethods("CSSPageRule", $.CssPageRule);

$.defineNativeMethods("WebKitCSSRegionRule", $.CssRegionRule);

$.defineNativeMethodsNonleaf("CSSRule", $.CssRule);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CSSStyleRule", $.CssStyleRule);

$.defineNativeMethods("CSSStyleSheet", $.CssStyleSheet);

$.defineNativeMethods("CSSSupportsRule", $.CssSupportsRule);

$.defineNativeMethods("CSSUnknownRule", $.CssUnknownRule);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("Clipboard", $.DataTransfer);

$.defineNativeMethods("DataTransferItem", $.DataTransferItem);

$.defineNativeMethods("DataTransferItemList", $.DataTransferItemList);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceAcceleration", $.DeviceAcceleration);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("DeviceRotationRate", $.DeviceRotationRate);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethods("DOMImplementation", $.DomImplementation);

$.defineNativeMethods("DOMParser", $.DomParser);

$.defineNativeMethods("DOMSettableTokenList", $.DomSettableTokenList);

$.defineNativeMethods("DOMStringList", $.DomStringList);

$.defineNativeMethodsNonleaf("DOMTokenList", $.DomTokenList);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethods("EventSource", $.EventSource);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileList", $.FileList);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("FontLoader", $.FontLoader);

$.defineNativeMethods("FormData", $.FormData);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("Gamepad", $.Gamepad);

$.defineNativeMethods("Geolocation", $.Geolocation);

$.defineNativeMethods("Geoposition", $.Geoposition);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("History", $.History);

$.defineNativeMethods("HTMLAllCollection", $.HtmlAllCollection);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequest", $.HttpRequest);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("XMLHttpRequestUpload", $.HttpRequestUpload);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("ImageData", $.ImageData);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("InputMethodContext", $.InputMethodContext);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("Location", $.Location);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethods("MediaController", $.MediaController);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaList", $.MediaList);

$.defineNativeMethods("MediaQueryList", $.MediaQueryList);

$.defineNativeMethods("MediaSource", $.MediaSource);

$.defineNativeMethods("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrack", $.MediaStreamTrack);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("MemoryInfo", $.MemoryInfo);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageChannel", $.MessageChannel);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("MessagePort", $.MessagePort);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("Metadata", $.Metadata);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("MIDIConnectionEvent", $.MidiConnectionEvent);

$.defineNativeMethods("MIDIMessageEvent", $.MidiMessageEvent);

$.defineNativeMethods("MIDIPort", $.MidiPort);

$.defineNativeMethods("MimeType", $.MimeType);

$.defineNativeMethods("MimeTypeArray", $.MimeTypeArray);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("MutationObserver|WebKitMutationObserver", $.MutationObserver);

$.defineNativeMethods("MutationRecord", $.MutationRecord);

$.defineNativeMethods("WebKitNamedFlow", $.NamedFlow);

$.defineNativeMethods("WebKitNamedFlowCollection", $.NamedFlowCollection);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeFilter", $.NodeFilter);

$.defineNativeMethods("NodeIterator", $.NodeIterator);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("Notification", $.Notification);

$.defineNativeMethods("NotificationCenter", $.NotificationCenter);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("Path", $.Path);

$.defineNativeMethods("Performance", $.Performance);

$.defineNativeMethodsNonleaf("PerformanceEntry", $.PerformanceEntry);

$.defineNativeMethods("PerformanceMark", $.PerformanceMark);

$.defineNativeMethods("PerformanceMeasure", $.PerformanceMeasure);

$.defineNativeMethods("PerformanceNavigation", $.PerformanceNavigation);

$.defineNativeMethods("PerformanceResourceTiming", $.PerformanceResourceTiming);

$.defineNativeMethods("PerformanceTiming", $.PerformanceTiming);

$.defineNativeMethods("Plugin", $.Plugin);

$.defineNativeMethods("PluginArray", $.PluginArray);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("Range", $.Range);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannel", $.RtcDataChannel);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFSender", $.RtcDtmfSender);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidate", $.RtcIceCandidate);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("RTCPeerConnection", $.RtcPeerConnection);

$.defineNativeMethods("RTCSessionDescription", $.RtcSessionDescription);

$.defineNativeMethods("RTCStatsReport", $.RtcStatsReport);

$.defineNativeMethods("RTCStatsResponse", $.RtcStatsResponse);

$.defineNativeMethods("Screen", $.Screen);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("ScriptProfile", $.ScriptProfile);

$.defineNativeMethods("ScriptProfileNode", $.ScriptProfileNode);

$.defineNativeMethods("SecurityPolicy", $.SecurityPolicy);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("Selection", $.Selection);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("SourceBuffer", $.SourceBuffer);

$.defineNativeMethods("SourceBufferList", $.SourceBufferList);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechGrammar", $.SpeechGrammar);

$.defineNativeMethods("SpeechGrammarList", $.SpeechGrammarList);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechInputResult", $.SpeechInputResult);

$.defineNativeMethods("SpeechRecognition", $.SpeechRecognition);

$.defineNativeMethods("SpeechRecognitionAlternative", $.SpeechRecognitionAlternative);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("SpeechRecognitionResult", $.SpeechRecognitionResult);

$.defineNativeMethods("SpeechSynthesis", $.SpeechSynthesis);

$.defineNativeMethods("SpeechSynthesisEvent", $.SpeechSynthesisEvent);

$.defineNativeMethods("SpeechSynthesisUtterance", $.SpeechSynthesisUtterance);

$.defineNativeMethods("SpeechSynthesisVoice", $.SpeechSynthesisVoice);

$.defineNativeMethods("Storage", $.Storage);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("StorageInfo", $.StorageInfo);

$.defineNativeMethods("StorageQuota", $.StorageQuota);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("StyleMedia", $.StyleMedia);

$.defineNativeMethodsNonleaf("StyleSheet", $.StyleSheet);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("TextMetrics", $.TextMetrics);

$.defineNativeMethods("TextTrack", $.TextTrack);

$.defineNativeMethods("TextTrackCue", $.TextTrackCue);

$.defineNativeMethods("TextTrackCueList", $.TextTrackCueList);

$.defineNativeMethods("TextTrackList", $.TextTrackList);

$.defineNativeMethods("TimeRanges", $.TimeRanges);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("Touch", $.Touch);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("TouchList", $.TouchList);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethods("TreeWalker", $.TreeWalker);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("URL", $.Url);

$.defineNativeMethods("ValidityState", $.ValidityState);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("Worker", $.Worker);

$.defineNativeMethods("XPathEvaluator", $.XPathEvaluator);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("XPathExpression", $.XPathExpression);

$.defineNativeMethods("XPathNSResolver", $.XPathNSResolver);

$.defineNativeMethods("XPathResult", $.XPathResult);

$.defineNativeMethods("XMLSerializer", $.XmlSerializer);

$.defineNativeMethods("XSLTProcessor", $.XsltProcessor);

$.defineNativeMethodsNonleaf("CSSValue", $._CSSValue);

$.defineNativeMethods("ClientRect", $._ClientRect);

$.defineNativeMethods("ClientRectList", $._ClientRectList);

$.defineNativeMethods("CSSRuleList", $._CssRuleList);

$.defineNativeMethods("CSSValueList", $._CssValueList);

$.defineNativeMethods("WebKitPoint", $._DomPoint);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("EntryArraySync", $._EntryArraySync);

$.defineNativeMethods("EntrySync", $._EntrySync);

$.defineNativeMethods("GamepadList", $._GamepadList);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("SpeechInputResultList", $._SpeechInputResultList);

$.defineNativeMethods("SpeechRecognitionResultList", $._SpeechRecognitionResultList);

$.defineNativeMethods("StyleSheetList", $._StyleSheetList);

$.defineNativeMethodsNonleaf("IDBCursor", $.Cursor);

$.defineNativeMethods("IDBCursorWithValue", $.CursorWithValue);

$.defineNativeMethods("IDBDatabase", $.Database);

$.defineNativeMethods("IDBFactory", $.IdbFactory);

$.defineNativeMethods("IDBIndex", $.Index);

$.defineNativeMethods("IDBKeyRange", $.KeyRange);

$.defineNativeMethods("IDBObjectStore", $.ObjectStore);

$.defineNativeMethods("IDBOpenDBRequest", $.OpenDBRequest);

$.defineNativeMethodsNonleaf("IDBRequest", $.Request);

$.defineNativeMethods("IDBTransaction", $.Transaction);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAngle", $.Angle);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedAngle", $.AnimatedAngle);

$.defineNativeMethods("SVGAnimatedBoolean", $.AnimatedBoolean);

$.defineNativeMethods("SVGAnimatedEnumeration", $.AnimatedEnumeration);

$.defineNativeMethods("SVGAnimatedInteger", $.AnimatedInteger);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedPreserveAspectRatio", $.AnimatedPreserveAspectRatio);

$.defineNativeMethods("SVGAnimatedRect", $.AnimatedRect);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGElementInstance", $.ElementInstance);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLength", $.Length);

$.defineNativeMethods("SVGLengthList", $.LengthList);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMatrix", $.Matrix);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGNumber", $.Number);

$.defineNativeMethods("SVGNumberList", $.NumberList);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethodsNonleaf("SVGPathSeg", $.PathSeg);

$.defineNativeMethods("SVGPathSegArcAbs", $.PathSegArcAbs);

$.defineNativeMethods("SVGPathSegArcRel", $.PathSegArcRel);

$.defineNativeMethods("SVGPathSegClosePath", $.PathSegClosePath);

$.defineNativeMethods("SVGPathSegCurvetoCubicAbs", $.PathSegCurvetoCubicAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicRel", $.PathSegCurvetoCubicRel);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothAbs", $.PathSegCurvetoCubicSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoCubicSmoothRel", $.PathSegCurvetoCubicSmoothRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticAbs", $.PathSegCurvetoQuadraticAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticRel", $.PathSegCurvetoQuadraticRel);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothAbs", $.PathSegCurvetoQuadraticSmoothAbs);

$.defineNativeMethods("SVGPathSegCurvetoQuadraticSmoothRel", $.PathSegCurvetoQuadraticSmoothRel);

$.defineNativeMethods("SVGPathSegLinetoAbs", $.PathSegLinetoAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalAbs", $.PathSegLinetoHorizontalAbs);

$.defineNativeMethods("SVGPathSegLinetoHorizontalRel", $.PathSegLinetoHorizontalRel);

$.defineNativeMethods("SVGPathSegLinetoRel", $.PathSegLinetoRel);

$.defineNativeMethods("SVGPathSegLinetoVerticalAbs", $.PathSegLinetoVerticalAbs);

$.defineNativeMethods("SVGPathSegLinetoVerticalRel", $.PathSegLinetoVerticalRel);

$.defineNativeMethods("SVGPathSegList", $.PathSegList);

$.defineNativeMethods("SVGPathSegMovetoAbs", $.PathSegMovetoAbs);

$.defineNativeMethods("SVGPathSegMovetoRel", $.PathSegMovetoRel);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPoint", $.Point);

$.defineNativeMethods("SVGPointList", $.PointList);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGPreserveAspectRatio", $.PreserveAspectRatio);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRect", $.Rect0);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGRenderingIntent", $.RenderingIntent);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStringList", $.StringList);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGTransform", $.Transform);

$.defineNativeMethods("SVGTransformList", $.TransformList);

$.defineNativeMethods("SVGUnitTypes", $.UnitTypes);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGViewSpec", $.ViewSpec);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGElementInstanceList", $._ElementInstanceList);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethods("SVGColor", $._SVGColor);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AnalyserNode", $.AnalyserNode);

$.defineNativeMethods("AudioBuffer", $.AudioBuffer);

$.defineNativeMethods("AudioBufferSourceNode", $.AudioBufferSourceNode);

$.defineNativeMethodsNonleaf("AudioContext", $.AudioContext);

$.defineNativeMethods("AudioDestinationNode", $.AudioDestinationNode);

$.defineNativeMethods("AudioListener", $.AudioListener);

$.defineNativeMethodsNonleaf("AudioNode", $.AudioNode);

$.defineNativeMethods("AudioParam", $.AudioParam);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethodsNonleaf("AudioSourceNode", $.AudioSourceNode);

$.defineNativeMethods("BiquadFilterNode", $.BiquadFilterNode);

$.defineNativeMethods("ChannelMergerNode", $.ChannelMergerNode);

$.defineNativeMethods("ChannelSplitterNode", $.ChannelSplitterNode);

$.defineNativeMethods("ConvolverNode", $.ConvolverNode);

$.defineNativeMethods("DelayNode", $.DelayNode);

$.defineNativeMethods("DynamicsCompressorNode", $.DynamicsCompressorNode);

$.defineNativeMethods("GainNode", $.GainNode);

$.defineNativeMethods("MediaElementAudioSourceNode", $.MediaElementAudioSourceNode);

$.defineNativeMethods("MediaStreamAudioDestinationNode", $.MediaStreamAudioDestinationNode);

$.defineNativeMethods("MediaStreamAudioSourceNode", $.MediaStreamAudioSourceNode);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("OfflineAudioContext", $.OfflineAudioContext);

$.defineNativeMethods("OscillatorNode", $.OscillatorNode);

$.defineNativeMethods("PannerNode", $.PannerNode);

$.defineNativeMethods("ScriptProcessorNode", $.ScriptProcessorNode);

$.defineNativeMethods("WaveShaperNode", $.WaveShaperNode);

$.defineNativeMethods("WaveTable", $.WaveTable);

$.defineNativeMethods("WebGLActiveInfo", $.ActiveInfo);

$.defineNativeMethods("WebGLBuffer", $.Buffer);

$.defineNativeMethods("WebGLCompressedTextureATC", $.CompressedTextureAtc);

$.defineNativeMethods("WebGLCompressedTexturePVRTC", $.CompressedTexturePvrtc);

$.defineNativeMethods("WebGLCompressedTextureS3TC", $.CompressedTextureS3TC);

$.defineNativeMethods("WebGLContextAttributes", $.ContextAttributes);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("WebGLDebugRendererInfo", $.DebugRendererInfo);

$.defineNativeMethods("WebGLDebugShaders", $.DebugShaders);

$.defineNativeMethods("WebGLDepthTexture", $.DepthTexture);

$.defineNativeMethods("EXTDrawBuffers", $.ExtDrawBuffers);

$.defineNativeMethods("EXTTextureFilterAnisotropic", $.ExtTextureFilterAnisotropic);

$.defineNativeMethods("WebGLFramebuffer", $.Framebuffer);

$.defineNativeMethods("WebGLLoseContext", $.LoseContext);

$.defineNativeMethods("OESElementIndexUint", $.OesElementIndexUint);

$.defineNativeMethods("OESStandardDerivatives", $.OesStandardDerivatives);

$.defineNativeMethods("OESTextureFloat", $.OesTextureFloat);

$.defineNativeMethods("OESTextureHalfFloat", $.OesTextureHalfFloat);

$.defineNativeMethods("OESVertexArrayObject", $.OesVertexArrayObject);

$.defineNativeMethods("WebGLProgram", $.Program);

$.defineNativeMethods("WebGLRenderbuffer", $.Renderbuffer);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("WebGLShader", $.Shader);

$.defineNativeMethods("WebGLShaderPrecisionFormat", $.ShaderPrecisionFormat);

$.defineNativeMethods("WebGLTexture", $.Texture);

$.defineNativeMethods("WebGLUniformLocation", $.UniformLocation);

$.defineNativeMethods("WebGLVertexArrayObjectOES", $.VertexArrayObject);

$.defineNativeMethods("Database", $.SqlDatabase);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

$.defineNativeMethods("SQLResultSet", $.SqlResultSet);

$.defineNativeMethods("SQLResultSetRowList", $.SqlResultSetRowList);

$.defineNativeMethods("SQLTransaction", $.SqlTransaction);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.initializeDispatchProperty(function(a) {
  $.getDispatchProperty = a;
}, "___dart_dispatch_record_ZxYxX_0_", $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main$closure); });
      } else {
        $.startRootIsolate($.main$closure);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main$closure); });
  } else {
    $.startRootIsolate($.main$closure);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = generateAccessor(fields[i], prototype);
        var parameter = "parameter_" + field;
        str += parameter;
        body += "this." + field + " = " + parameter + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", "c", ["f<"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    var objectClassObject = collectedClasses.Object, shortNames = "get$p,call$0,call$1,call$2,call$3,call$4,eval$1,get$sb,then$1,get$_id,create$0,get$_key,listen$1,lookup$1,toJson$0,get$_list,get$_name,get$_next,process$0,set$_next,_onError$1,get$_state,get$_value,moveNext$0,set$_state,set$_value,set$number,visitMap$1,_callback$2,_dispatch$1,get$current,iterSetup$3,set$_handle,set$comment,set$network,visitList$1,_sendError$1,_sendValue$1,catchError$1,set$comments,toSendPort$0,unregister$1,_setGlobals$0,get$_callback,get$_contents,get$_duration,get$_previous,get$_workerId,set$_contents,set$_previous,_runCallback$1,get$_isolateId,get$_scheduled,runIteration$0,set$_scheduled,_checkReplyTo$1,get$_futurePort,visitSendPort$1,get$$$_observers,get$_liblib2$_id,get$_receivePort,set$$$_observers,visitPrimitive$1,get$_nextListener,get$cellPhoneList,set$_nextListener,set$cellPhoneList,visitCloseToken$1,_liblib6$_onData$1,compareAndNotify$0,get$_cancelOnError,set$_liblib1$_next,visitIsolateSink$1,_insertAdjacentHtml$2,deserializeSendPort$1,get$_resultOrListeners,set$_liblib1$_previous,deserializeCloseToken$1,deserializeIsolateSink$1,get$_liblib6$_subscription,set$_liblib6$_subscription".split(","), longNames = "p,call,call,call,call,call,eval,sb,then,_id,create,_key,listen,lookup,toJson,_list,_name,_next,process,_next=,_onError,_state,_value,moveNext,_state=,_value=,number=,visitMap,_callback,_dispatch,current,iterSetup,_handle=,comment=,network=,visitList,_sendError,_sendValue,catchError,comments=,toSendPort,unregister,_setGlobals,_callback,_contents,_duration,_previous,_workerId,_contents=,_previous=,_runCallback,_isolateId,_scheduled,runIteration,_scheduled=,_checkReplyTo,_futurePort,visitSendPort,$_observers,_id,_receivePort,$_observers=,visitPrimitive,_nextListener,cellPhoneList,_nextListener=,cellPhoneList=,visitCloseToken,_onData,compareAndNotify,_cancelOnError,_next=,visitIsolateSink,_insertAdjacentHtml,deserializeSendPort,_resultOrListeners,_previous=,deserializeCloseToken,deserializeIsolateSink,_subscription,_subscription=".split(",");
    for (var j = 0; j < shortNames.length; j++) {
      var type = 0;
      var short = shortNames[j];
      if (short[0] == "g")
        type = 1;
      if (short[0] == "s")
        type = 2;
      objectClassObject[short] = Function("return this.noSuchMethod$1(this,$.createInvocationMirror('" + longNames[j] + "','" + short + "'," + type + ",Array.prototype.slice.call(arguments" + "),[]))");
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.makeConstantList = oldIsolate.makeConstantList;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=contactsbookspa.html_bootstrap.dart.js.map
